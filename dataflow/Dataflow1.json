{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Complex_Id as string,",
				"          Facility_Id as string,",
				"          Carrier_Visit_Id as string,",
				"          Phase as string,",
				"          Visit_Nbr as string,",
				"          Carrier_Mode as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          ETA as timestamp,",
				"          ETD as timestamp,",
				"          Operator_Line_Id as string,",
				"          Operator_Line_Role as string,",
				"          Operator_Line_Name as string,",
				"          Time_First_Availabilty as string,",
				"          Time_Discharge_Complete as string,",
				"          Service_Id as string,",
				"          Service_Name as string,",
				"          Vessel_Id as string,",
				"          IB_VYG as string,",
				"          OB_VYG as string,",
				"          Carrier_Name as string,",
				"          Vessel_Class as string,",
				"          Published_ETA as string,",
				"          Published_ETD as string,",
				"          Start_Work as string,",
				"          End_Work as string,",
				"          Begin_Receive_Date as string,",
				"          Cargo_Cutoff_Date as string,",
				"          Hazard_Cutoff_Date as string,",
				"          Reefer_Cutoff_Date as string,",
				"          Labor_On_Board_Date as string,",
				"          Labor_Off_Board_Date as string,",
				"          Off_Port_Arrival_Date as string,",
				"          Off_Port_Departure as string,",
				"          Pilot_On_Board_Date as string,",
				"          Pilot_Off_Board_Date as string,",
				"          Est_BBK_Discharge as string,",
				"          Est_BBK_Load as string,",
				"          Est_Load as string,",
				"          Est_Discharge as string,",
				"          Est_Restow as string,",
				"          Est_Shift as string,",
				"          vvFlexString01 as string,",
				"          vvFlexString02 as string,",
				"          vvFlexString03 as string,",
				"          vvFlexString04 as string,",
				"          vvFlexString05 as string,",
				"          vvFlexString06 as string,",
				"          vvFlexString07 as string,",
				"          vvFlexString08 as string,",
				"          vvFlexDate01 as string,",
				"          vvFlexDate02 as string,",
				"          vvFlexDate03 as string,",
				"          vvFlexDate04 as string,",
				"          vvFlexDate05 as string,",
				"          vvFlexDate06 as string,",
				"          vvFlexDate07 as string,",
				"          vvFlexDate08 as string,",
				"          Carrier_Visit_Key as integer,",
				"          Vessel_Classification as string,",
				"          Vessel_Class_Length_Overall_cm as integer,",
				"          Vessel_Class_Beam_cm as short,",
				"          Vessel_TEU_Capacity as string,",
				"          Lloyds_Code as string,",
				"          TimeFirstAvailabilty as timestamp,",
				"          StartWork as timestamp,",
				"          TimeDischargeComplete as timestamp,",
				"          EndWork as timestamp,",
				"          Week as integer,",
				"          Year as integer,",
				"          Month as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'eurogatectb',",
				"     folderPath: 'silver/vessel_visits') ~> source1",
				"source1 aggregate(groupBy(Carrier_Visit_Key),",
				"     each(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'eurogatectb',",
				"     folderPath: 'silver/vessel_visits',",
				"     truncate:true,",
				"     mergeSchema: true,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          1,",
				"          Year,",
				"          Month,",
				"          Week",
				"     )) ~> sink1"
			]
		}
	}
}