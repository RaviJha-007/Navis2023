{
	"name": "RTG_Moves_mict",
	"properties": {
		"description": "kpi bay change",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "select6"
				},
				{
					"name": "FetchCheIsRTG"
				},
				{
					"name": "union1"
				},
				{
					"name": "PutCheIsRTG"
				},
				{
					"name": "removePutCheAndToPos"
				},
				{
					"name": "removeFetchCheDetails"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "window1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          mve_gkey as integer,",
				"          Unit_Nbr as string,",
				"          Facility_Id as string,",
				"          Complex_Id as string,",
				"          Yard_Id as string,",
				"          Carrier_Visit_Key as integer,",
				"          Event_Type_Id as string,",
				"          Move_Kind as string,",
				"          From_Location as string,",
				"          To_Location as string,",
				"          From_Position_Name as string,",
				"          To_Position_Name as string,",
				"          Carry_CHE_Operator_Id as short,",
				"          Fetch_CHE_Operator_Id as string,",
				"          Put_CHE_Operator_Id as string,",
				"          Fetch_CHE_Id as long,",
				"          Fetch_CHE_Kind as string,",
				"          Carry_CHE_Id as long,",
				"          Carry_CHE_Kind as string,",
				"          Put_CHE_Id as long,",
				"          Put_CHE_Kind as string,",
				"          QC_CHE_Id as long,",
				"          QC_CHE_Kind as string,",
				"          t_carry_complete as timestamp,",
				"          t_put as timestamp,",
				"          t_fetch as timestamp,",
				"          t_dispatch as timestamp,",
				"          t_discharge as timestamp,",
				"          t_carry_dispatch as timestamp,",
				"          t_carry_fetch_ready as timestamp,",
				"          t_carry_put_ready as timestamp,",
				"          dist_carry as integer,",
				"          dist_start as short,",
				"          Twin_Fetch as string,",
				"          Twin_Carry as string,",
				"          Twin_Put as string,",
				"          Category_Id as string,",
				"          Freight_Kind_Id as string,",
				"          to_pos_gkey as integer,",
				"          fm_pos_gkey as integer,",
				"          Restow_Reason as string,",
				"          Container_Line_Id as string,",
				"          Container_Line_Role as string,",
				"          pow as string,",
				"          ufv_gkey as integer,",
				"          Berth_Id as string,",
				"          Goods_And_Ctr_Wt_Kg as double,",
				"          active_ufv as integer,",
				"          Requires_Power_Flag as string,",
				"          OOG_Flag as string,",
				"          Shipper_Id as string,",
				"          Consignee_Id as string,",
				"          Commodity_Id as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          Rehandles as string,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'mict',",
				"     folderPath: 'silver/moves') ~> source1",
				" filter(put_che_kind=='RTG') ~> filter1",
				"source1 select(mapColumn(",
				"          mve_gkey,",
				"          Unit_Nbr,",
				"          Facility_Id,",
				"          Complex_Id,",
				"          Yard_Id,",
				"          Carrier_Visit_Key,",
				"          Event_Type_Id,",
				"          Move_Kind,",
				"          From_Location,",
				"          To_Location,",
				"          From_Position_Name,",
				"          To_Position_Name,",
				"          Fetch_CHE_Id,",
				"          Fetch_CHE_Kind,",
				"          Put_CHE_Id,",
				"          Put_CHE_Kind,",
				"          t_fetch,",
				"          t_put,",
				"          Category_Id,",
				"          Freight_Kind_Id,",
				"          pow,",
				"          Year,",
				"          Month,",
				"          Week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6 filter(Fetch_CHE_Kind=='RTG') ~> FetchCheIsRTG",
				"removePutCheAndToPos, removeFetchCheDetails union(byName: false)~> union1",
				"select6 filter(Put_CHE_Kind=='RTG') ~> PutCheIsRTG",
				"FetchCheIsRTG select(mapColumn(",
				"          mve_gkey,",
				"          Unit_Nbr,",
				"          Facility_Id,",
				"          Complex_Id,",
				"          Yard_Id,",
				"          Carrier_Visit_Key,",
				"          Event_Type_Id,",
				"          Move_Kind,",
				"          From_Location,",
				"          To_Location,",
				"          Position_Name = From_Position_Name,",
				"          CHE_Id = Fetch_CHE_Id,",
				"          CHE_Kind = Fetch_CHE_Kind,",
				"          Move_Time = t_fetch,",
				"          Category_Id,",
				"          Freight_Kind_Id,",
				"          pow,",
				"          Year,",
				"          Month,",
				"          Week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removePutCheAndToPos",
				"PutCheIsRTG select(mapColumn(",
				"          mve_gkey,",
				"          Unit_Nbr,",
				"          Facility_Id,",
				"          Complex_Id,",
				"          Yard_Id,",
				"          Carrier_Visit_Key,",
				"          Event_Type_Id,",
				"          Move_Kind,",
				"          From_Location,",
				"          To_Location,",
				"          Position_Name = To_Position_Name,",
				"          CHE_Id = Put_CHE_Id,",
				"          CHE_Kind = Put_CHE_Kind,",
				"          Move_Time = t_put,",
				"          Category_Id,",
				"          Freight_Kind_Id,",
				"          pow,",
				"          Year,",
				"          Month,",
				"          Week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeFetchCheDetails",
				"union1 aggregate(groupBy(mve_gkey),",
				"     each(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1",
				"aggregate1 sort(asc(mve_gkey, true)) ~> sort1",
				"sort1 window(asc(CHE_Id, true),",
				"     asc(mve_gkey, true),",
				"     Prev_CheID = lag(CHE_Id, 1) ,",
				"          Next_CheID = lead(CHE_Id, 1),",
				"          Prev_Position = lag(Position_Name,1),",
				"          Next_Position = lead(Position_Name, 1),",
				"          Prev_MoveTime = lag(Move_Time,1),",
				"          Next_MoveTime = lead(Move_Time, 1) ) ~> window1"
			]
		}
	}
}