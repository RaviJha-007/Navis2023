{
	"name": "Rehandle_plipdeco",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Filter1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Filter2"
				},
				{
					"name": "Filter3"
				},
				{
					"name": "DerivedColumn2"
				},
				{
					"name": "Filter4"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "Join1"
				},
				{
					"name": "Sort2"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "parameters{\n\tcustomer as string ('cmsa')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(Move_Kind!=\"DSCH\" && Event_Type_Id==\"UNIT_LOAD\") ~> Filter1\nFilter1 derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn1\nDerivedColumn1 filter(Tier!='') ~> Filter2\nsource1 filter(Move_Kind!='DSCH' && Event_Type_Id=='UNIT_YARD_SHIFT') ~> Filter3\nFilter3 derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn2\nDerivedColumn2 filter(Tier!='') ~> Filter4\nFilter4 sort(asc(t_put, true)) ~> Sort1\nSort1 select(mapColumn(\n\t\tSlot\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(Slot),\n\teach(match(name!='Slot'), $$ = first($$))) ~> Aggregate1\nFilter2, Aggregate1 join(DerivedColumn1@Slot == Aggregate1@Slot,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(t_put, true)) ~> Sort2\nSort2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
		}
	}
}