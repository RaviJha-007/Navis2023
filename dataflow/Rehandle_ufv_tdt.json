{
	"name": "Rehandle_ufv_tdt",
	"properties": {
		"description": "Grouping by UFV;  exclude YARD Moves;",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Sort2"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "window1"
				},
				{
					"name": "select2"
				},
				{
					"name": "filter1"
				}
			],
			"script": "parameters{\n\tcustomer as string ('tdt')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nfilter1 sort(asc(ufv_gkey, true),\n\tasc(t_put, true)) ~> Sort2\nwindow1 alterRow(upsertIf(true())) ~> AlterRow1\nSort2 window(over(ufv_gkey,\n\t\tFacility_Id),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerFcyVisit = count(mve_gkey)) ~> window1\nsource1 select(mapColumn(\n\t\tmve_gkey,\n\t\tCategory_Id,\n\t\tUnit_Nbr,\n\t\tMove_Kind,\n\t\tt_put,\n\t\tRequires_Power_Flag,\n\t\tFacility_Id,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tufv_gkey,\n\t\tEvent_Type_Id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nselect2 filter(Event_Type_Id!='UNIT_YARD_MOVE') ~> filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'gold/rehandle_ufv',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tCategory_Id,\n\t\tUnit_Nbr,\n\t\tMove_Kind,\n\t\tt_put,\n\t\tRequires_Power_Flag,\n\t\tFacility_Id,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tufv_gkey,\n\t\tEvent_Type_Id,\n\t\tRNumber,\n\t\tMovesPerFcyVisit\n\t)) ~> sink1"
		}
	}
}