{
	"name": "Rehandle_within_Vessel_valencia",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          mve_gkey as integer,",
				"          Unit_Nbr as string,",
				"          Facility_Id as string,",
				"          Complex_Id as string,",
				"          Yard_Id as string,",
				"          Carrier_Visit_Key as integer,",
				"          Event_Type_Id as string,",
				"          Move_Kind as string,",
				"          From_Location as string,",
				"          To_Location as string,",
				"          From_Position_Name as string,",
				"          To_Position_Name as string,",
				"          Carry_CHE_Operator_Id as short,",
				"          Fetch_CHE_Operator_Id as string,",
				"          Put_CHE_Operator_Id as string,",
				"          Fetch_CHE_Id as long,",
				"          Fetch_CHE_Kind as string,",
				"          Carry_CHE_Id as long,",
				"          Carry_CHE_Kind as string,",
				"          Put_CHE_Id as long,",
				"          Put_CHE_Kind as string,",
				"          QC_CHE_Id as long,",
				"          QC_CHE_Kind as string,",
				"          t_carry_complete as timestamp,",
				"          t_put as timestamp,",
				"          t_fetch as timestamp,",
				"          t_dispatch as timestamp,",
				"          t_discharge as timestamp,",
				"          t_carry_dispatch as timestamp,",
				"          t_carry_fetch_ready as timestamp,",
				"          t_carry_put_ready as timestamp,",
				"          dist_carry as integer,",
				"          dist_start as short,",
				"          Twin_Fetch as string,",
				"          Twin_Carry as string,",
				"          Twin_Put as string,",
				"          Category_Id as string,",
				"          Freight_Kind_Id as string,",
				"          to_pos_gkey as integer,",
				"          fm_pos_gkey as integer,",
				"          Restow_Reason as string,",
				"          Container_Line_Id as string,",
				"          Container_Line_Role as string,",
				"          pow as string,",
				"          ufv_gkey as integer,",
				"          Berth_Id as string,",
				"          Goods_And_Ctr_Wt_Kg as double,",
				"          active_ufv as integer,",
				"          Requires_Power_Flag as string,",
				"          OOG_Flag as string,",
				"          Shipper_Id as string,",
				"          Consignee_Id as string,",
				"          Commodity_Id as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          Rehandles as string,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'valencia',",
				"     folderPath: 'silver/moves') ~> source1",
				"source(output(",
				"          ecEventGkey as long,",
				"          yardGkey as string,",
				"          YardID as string,",
				"          FcyID as string,",
				"          cheKind as string,",
				"          cheName as string,",
				"          cheID as long,",
				"          EcEventTime as timestamp,",
				"          type as short,",
				"          subType as short,",
				"          typeDescription as string,",
				"          fromCheIdName as string,",
				"          ToCheIdName as string,",
				"          unitIdName as string,",
				"          powName as string,",
				"          poolName as string,",
				"          workQueue as string,",
				"          travelDistance as short,",
				"          moveKind as string,",
				"          isTwinMove as string,",
				"          startDistance as short,",
				"          workAssignmentId as double,",
				"          unitReference as string,",
				"          tranId as string,",
				"          locType as string,",
				"          locId as string,",
				"          locSlot as string,",
				"          opsPosId as string,",
				"          unladenLoctype as string,",
				"          unladenLocid as string,",
				"          unladenLocSlot as string,",
				"          ladenLoctype as string,",
				"          ladenLocid as string,",
				"          ladenLocSlot as string,",
				"          lastEstMoveTime as string,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'valencia',",
				"     folderPath: 'silver/ecevents') ~> source2",
				"source(output(",
				"          Carrier_Visit_Key as integer,",
				"          Complex_Id as string,",
				"          Facility_Id as string,",
				"          Carrier_Visit_Id as string,",
				"          Phase as string,",
				"          Visit_Nbr as string,",
				"          Carrier_Mode as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          ETA as timestamp,",
				"          ETD as timestamp,",
				"          Operator_Line_Id as string,",
				"          Operator_Line_Role as string,",
				"          Operator_Line_Name as string,",
				"          Time_First_Availabilty as string,",
				"          Time_Discharge_Complete as string,",
				"          Service_Id as string,",
				"          Service_Name as string,",
				"          Vessel_Id as string,",
				"          IB_VYG as string,",
				"          OB_VYG as string,",
				"          Carrier_Name as string,",
				"          Vessel_Class as string,",
				"          Published_ETA as string,",
				"          Published_ETD as string,",
				"          Start_Work as string,",
				"          End_Work as string,",
				"          Begin_Receive_Date as string,",
				"          Cargo_Cutoff_Date as string,",
				"          Hazard_Cutoff_Date as string,",
				"          Reefer_Cutoff_Date as string,",
				"          Labor_On_Board_Date as string,",
				"          Labor_Off_Board_Date as string,",
				"          Off_Port_Arrival_Date as string,",
				"          Off_Port_Departure as string,",
				"          Pilot_On_Board_Date as string,",
				"          Pilot_Off_Board_Date as string,",
				"          Est_BBK_Discharge as string,",
				"          Est_BBK_Load as string,",
				"          Est_Load as string,",
				"          Est_Discharge as string,",
				"          Est_Restow as string,",
				"          Est_Shift as string,",
				"          vvFlexString01 as string,",
				"          vvFlexString02 as string,",
				"          vvFlexString03 as string,",
				"          vvFlexString04 as string,",
				"          vvFlexString05 as string,",
				"          vvFlexString06 as string,",
				"          vvFlexString07 as string,",
				"          vvFlexString08 as string,",
				"          vvFlexDate01 as string,",
				"          vvFlexDate02 as string,",
				"          vvFlexDate03 as string,",
				"          vvFlexDate04 as string,",
				"          vvFlexDate05 as string,",
				"          vvFlexDate06 as string,",
				"          vvFlexDate07 as string,",
				"          vvFlexDate08 as string,",
				"          Vessel_Classification as string,",
				"          Vessel_Class_Length_Overall_cm as integer,",
				"          Vessel_Class_Beam_cm as short,",
				"          Vessel_TEU_Capacity as string,",
				"          Lloyds_Code as string,",
				"          TimeFirstAvailabilty as timestamp,",
				"          StartWork as timestamp,",
				"          TimeDischargeComplete as timestamp,",
				"          EndWork as timestamp,",
				"          Week as integer,",
				"          Year as integer,",
				"          Month as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'valencia',",
				"     folderPath: 'silver/vesselvisits') ~> source3",
				"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
				"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
				"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
				"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          mve_gkey,",
				"          Unit_Nbr,",
				"          Facility_Id = source1@Facility_Id,",
				"          Complex_Id = source1@Complex_Id,",
				"          Yard_Id,",
				"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
				"          Event_Type_Id,",
				"          Move_Kind,",
				"          From_Location,",
				"          To_Location,",
				"          From_Position_Name,",
				"          To_Position_Name,",
				"          Carry_CHE_Operator_Id,",
				"          Fetch_CHE_Operator_Id,",
				"          Put_CHE_Operator_Id,",
				"          Fetch_CHE_Id,",
				"          Fetch_CHE_Kind,",
				"          Carry_CHE_Id,",
				"          Carry_CHE_Kind,",
				"          Put_CHE_Id,",
				"          Put_CHE_Kind,",
				"          QC_CHE_Id,",
				"          QC_CHE_Kind,",
				"          t_carry_complete,",
				"          t_put,",
				"          t_fetch,",
				"          t_dispatch,",
				"          t_discharge,",
				"          t_carry_dispatch,",
				"          t_carry_fetch_ready,",
				"          t_carry_put_ready,",
				"          dist_carry,",
				"          dist_start,",
				"          Twin_Fetch,",
				"          Twin_Carry,",
				"          Twin_Put,",
				"          Category_Id,",
				"          Freight_Kind_Id,",
				"          to_pos_gkey,",
				"          fm_pos_gkey,",
				"          Restow_Reason,",
				"          Container_Line_Id,",
				"          Container_Line_Role,",
				"          pow,",
				"          ufv_gkey,",
				"          Berth_Id,",
				"          Goods_And_Ctr_Wt_Kg,",
				"          active_ufv,",
				"          Requires_Power_Flag,",
				"          OOG_Flag,",
				"          Shipper_Id,",
				"          Consignee_Id,",
				"          Commodity_Id,",
				"          ATA = source1@ATA,",
				"          ATD = source1@ATD,",
				"          Rehandles,",
				"          Year = source1@Year,",
				"          Month = source1@Month,",
				"          Week = source1@Week,",
				"          Vessel_Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
				"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
				"     && EcEventTime >= ATA",
				"     && EcEventTime <= ATD,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'left')~> join1",
				"join1 select(mapColumn(",
				"          ecEventGkey,",
				"          yardGkey,",
				"          YardID,",
				"          FcyID,",
				"          cheKind,",
				"          cheName,",
				"          cheID,",
				"          EcEventTime,",
				"          type,",
				"          subType,",
				"          typeDescription,",
				"          fromCheIdName,",
				"          ToCheIdName,",
				"          unitIdName,",
				"          powName,",
				"          poolName,",
				"          workQueue,",
				"          travelDistance,",
				"          moveKind,",
				"          isTwinMove,",
				"          startDistance,",
				"          workAssignmentId,",
				"          unitReference,",
				"          tranId,",
				"          locType,",
				"          locId,",
				"          locSlot,",
				"          opsPosId,",
				"          unladenLoctype,",
				"          unladenLocid,",
				"          unladenLocSlot,",
				"          ladenLoctype,",
				"          ladenLocid,",
				"          ladenLocSlot,",
				"          lastEstMoveTime,",
				"          Year = source2@Year,",
				"          Month = source2@Month,",
				"          Week = source2@Week,",
				"          Vessel_Id = derivedColumn1@Vessel_Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
				"select2 aggregate(groupBy(ecEventGkey),",
				"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'valencia',",
				"     folderPath: 'gold/rehandle_vessel',",
				"     mergeSchema: true,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ecEventGkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}