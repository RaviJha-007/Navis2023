{
	"name": "SC_GMPH",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "RTG"
				},
				{
					"linkedService": {
						"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "workhours"
				}
			],
			"transformations": [
				{
					"name": "select"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Filter5"
				},
				{
					"name": "Aggregate3"
				},
				{
					"name": "DerivedColumn3"
				},
				{
					"name": "Window1"
				},
				{
					"name": "DerivedColumn4"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "Sort2"
				},
				{
					"name": "Window2"
				},
				{
					"name": "Join1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "DerivedColumn5"
				},
				{
					"name": "Filter6"
				},
				{
					"name": "DerivedColumn6"
				},
				{
					"name": "Filter7"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "AlterRow2"
				},
				{
					"name": "derivedColumn10"
				},
				{
					"name": "derivedColumn11"
				},
				{
					"name": "derivedColumn12"
				},
				{
					"name": "derivedColumn13"
				}
			],
			"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as short,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as boolean,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tworkAssignmentId,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='SC' && typeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(EcEventTime,'yyyy-MM-dd')),\n\t\tTime = toString(EcEventTime,'HH:mm:ss'),\n\t\tShiftDate = iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),toDate(toString(subDays(EcEventTime,1),'yyyy-MM-dd')),toDate(toString(EcEventTime,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(ladenLocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(EcEventTime, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),toDate(toString(subDays(EcEventTime,1),'yyyy-MM-dd')),toDate(toString(EcEventTime,'yyyy-MM-dd')))),\n\t\tDay_Of_Week = dayOfWeek(iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),subDays(toDate(toString(EcEventTime,'yyyy-MM-dd')),1),toDate(toString(EcEventTime,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((typeDescription == 'LGOF' || typeDescription == 'LGON') && cheKind == 'SC') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),toDate(toString(subDays(EcEventTime,1),'yyyy-MM-dd')),toDate(toString(EcEventTime,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(EcEventTime,'yyyy-MM-dd')),\n\t\tTime = toString(EcEventTime,'HH:mm:ss'),\n\t\tShiftDate = iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),toDate(toString(subDays(EcEventTime,1),'yyyy-MM-dd')),toDate(toString(EcEventTime,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3),\n\t\tDay_Of_Week = dayOfWeek(iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),subDays(toDate(toString(EcEventTime,'yyyy-MM-dd')),1),toDate(toString(EcEventTime,'yyyy-MM-dd'))))) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(cheID, true),\n\tasc(EcEventTime, true),\n\tCHE_ID_PREV = lag(cheID),\n\t\tCHE_ID_NXT = lead(cheID),\n\t\tTimeStamp_PREV = lag(EcEventTime),\n\t\tTimeStamp_NXT = lead(EcEventTime),\n\t\teventTypeDescription_PREV = lag(typeDescription),\n\t\teventTypeDescription_NXT = lead(typeDescription)) ~> Window1\nWindow1 derive(LGOF = case(cheID==CHE_ID_NXT && (cheID==CHE_ID_PREV || cheID!=CHE_ID_PREV),case(typeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(cheID!=CHE_ID_NXT && (cheID==CHE_ID_PREV || cheID!=CHE_ID_PREV)),case(typeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(typeDescription=='LGON',EcEventTime),\n\t\tWorkTime = toDouble((case(cheID==CHE_ID_NXT && (cheID==CHE_ID_PREV || cheID!=CHE_ID_PREV),case(typeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(cheID!=CHE_ID_NXT && (cheID==CHE_ID_PREV || cheID!=CHE_ID_PREV)),case(typeDescription=='LGON', ShiftEndTime))-case(typeDescription=='LGON',EcEventTime))/3600000)) ~> DerivedColumn4\nderivedColumn11 sort(asc(yardGkey, true),\n\tasc(cheID, true),\n\tasc(EcEventTime, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(cheID, true),\n\tasc(EcEventTime, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(cheID, true),\n\tasc(EcEventTime, true),\n\tCHE_ID_PREV = lag(cheID),\n\t\tCHE_ID_NXT = lead(cheID),\n\t\tTimeStamp_PREV = lag(EcEventTime),\n\t\tTimeStamp_NXT = lead(EcEventTime),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nderivedColumn13, Filter7 join(Aggregate1@cheID == Aggregate3@cheID\n\t&& derivedColumn12@ShiftStartTime == derivedColumn10@ShiftStartTime\n\t&& derivedColumn12@ShiftEndTime == derivedColumn10@ShiftEndTime,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\teach(match(/* All input columns */ true()),\n\t\t\t/* Input name */ $$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(EcEventTime>=LGON && EcEventTime<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nDerivedColumn3 derive(ShiftStartTime = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','06:00:00')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','12:00:00')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(ShiftDate),' ','18:00:00')),                toTimestamp(concat(toString(ShiftDate),' ','24:00:00'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','06:00:00')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','14:00:00')),            toTimestamp(concat(toString(ShiftDate),' ','22:00:00'))            ))),\n\t\tShiftEndTime = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','11:59:59')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','17:59:59')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(ShiftDate),' ','23:59:59')),                toTimestamp(concat(toString(ShiftDate),' ','05:59:59'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','13:59:59')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','21:59:59')),toTimestamp(concat(toString(ShiftDate),' ','05:59:59'))            )))) ~> derivedColumn10\nderivedColumn10 derive(Shift = iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('06:00:00'),1,iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('14:00:00')||toString(ShiftStartTime, 'HH:mm:ss')==toString('12:00:00'),2,iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('22:00:00')||toString(ShiftStartTime, 'HH:mm:ss')==toString('18:00:00'),3,4)))) ~> derivedColumn11\nDerivedColumn1 derive(ShiftStartTime = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','06:00:00')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','12:00:00')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(ShiftDate),' ','18:00:00')),                toTimestamp(concat(toString(ShiftDate),' ','24:00:00'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','06:00:00')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','14:00:00')),            toTimestamp(concat(toString(ShiftDate),' ','22:00:00'))            ))),\n\t\tShiftEndTime = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','11:59:59')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','17:59:59')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(ShiftDate),' ','23:59:59')),                toTimestamp(concat(toString(ShiftDate),' ','05:59:59'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','13:59:59')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','21:59:59')),toTimestamp(concat(toString(ShiftDate),' ','05:59:59'))            )))) ~> derivedColumn12\nderivedColumn12 derive(Shift = iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('06:00:00'),1,iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('14:00:00')||toString(ShiftStartTime, 'HH:mm:ss')==toString('12:00:00'),2,iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('22:00:00')||toString(ShiftStartTime, 'HH:mm:ss')==toString('18:00:00'),3,4)))) ~> derivedColumn13\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/gold/rtg_ecevents_v2',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/gold/rtg_workhours_v2',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
		}
	}
}