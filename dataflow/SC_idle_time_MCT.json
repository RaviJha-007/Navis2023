{
	"name": "SC_idle_time_MCT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "ecevents"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink5"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "window1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select5"
				},
				{
					"name": "alterRow5"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "sort1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ecEventGkey as long,",
				"          yardGkey as integer,",
				"          YardID as string,",
				"          FcyID as string,",
				"          cheKind as string,",
				"          CHE_Name as string,",
				"          CHE_ID as short,",
				"          eventType as short,",
				"          eventSubType as short,",
				"          eventTypeDescription as string,",
				"          fromCheIdName as boolean,",
				"          ToCheIdName as boolean,",
				"          unit as string,",
				"          pow as string,",
				"          pool as string,",
				"          workQueue as string,",
				"          travelDistance as short,",
				"          moveKind as string,",
				"          isTwin as boolean,",
				"          startDistance as short,",
				"          workAssignment as string,",
				"          unitRef as string,",
				"          tran_ID as string,",
				"          locType as string,",
				"          locID as string,",
				"          locSlot as string,",
				"          opsPosID as string,",
				"          unladenLoctype as string,",
				"          unladenLocID as string,",
				"          unladenLocSlot as string,",
				"          ladenLoctype as string,",
				"          ladenLocID as string,",
				"          laden_LocSlot as string,",
				"          lastEstMoveTime as string,",
				"          operator_name as string,",
				"          EcEventTime as timestamp,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     fileSystem: 'mct',",
				"     folderPath: 'silver/ecevents') ~> ecevents",
				"ecevents filter(cheKind == 'SC') ~> filter1",
				"derivedColumn4 window(over(CHE_ID,",
				"          EcEventDate),",
				"     asc(CHE_ID, true),",
				"     asc(EcEventTime, true),",
				"     EcEventTime_PREV = lag(EcEventTime, 1, null()),",
				"          EcEventTime_NEXT = lead(EcEventTime, 1, null()),",
				"          typeDescription_PREV = lag(eventTypeDescription, 1, null()),",
				"          typeDescription_NEXT = lead(eventTypeDescription, 1, null()),",
				"          cheID_PREV = lag(CHE_ID, 1, null()),",
				"          cheID_NEXT = lead(CHE_ID, 1, null()),",
				"          EcEventDate_PREV = lag(EcEventDate, 1, null()),",
				"          EcEventDate_NEXT = lead(EcEventDate, 1, null())) ~> window1",
				"sort1 derive(idle_time = iif(cheID_PREV == CHE_ID && CHE_ID == cheID_NEXT && EcEventDate_PREV == EcEventDate && EcEventDate == EcEventDate_NEXT\r",
				"    , iif(typeDescription_PREV==\"DROP\" && eventTypeDescription==\"DSPT\" &&  in([\"EAGD\", \"EARW\", \"EASH\", \"ETGD\", \"ETRL\", \"ETRW\", \"ETSH\"], typeDescription_NEXT), \r",
				"    iif(:time_delta_mins >= 0.0 , :time_delta_mins, toLong(0))\r",
				"    , toLong(0))\r",
				"    , toLong(0)),",
				"          time_delta_mins = :time_delta_mins,",
				"          time_delta_mins := (toLong(EcEventTime) - toLong(EcEventTime_PREV))/(60*1000)) ~> derivedColumn3",
				"aggregate1 select(mapColumn(",
				"          EcEventDate,",
				"          cheID = CHE_ID,",
				"          CHE_Name,",
				"          first_che_time,",
				"          last_che_time,",
				"          total_idle_time,",
				"          year,",
				"          month,",
				"          week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 alterRow(upsertIf(true())) ~> alterRow5",
				"filter1 derive(EcEventDate = toDate(toString(EcEventTime,'yyyy-MM-dd'))) ~> derivedColumn4",
				"window1 sort(asc(EcEventDate, true),",
				"     asc(CHE_ID, true),",
				"     asc(EcEventTime, true)) ~> sort1",
				"derivedColumn3 aggregate(groupBy(EcEventDate,",
				"          CHE_ID,",
				"          CHE_Name),",
				"     total_idle_time = sum(idle_time),",
				"          first_che_time = first(EcEventTime),",
				"          last_che_time = max(EcEventTime),",
				"          year = first(Year),",
				"          month = first(Month),",
				"          week = first(Week)) ~> aggregate1",
				"alterRow5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mct',",
				"     folderPath: 'gold/sc_idle_time',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: true,",
				"     upsertable: true,",
				"     keys:['EcEventDate','cheID'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          year,",
				"          month,",
				"          week",
				"     )) ~> sink5"
			]
		}
	}
}