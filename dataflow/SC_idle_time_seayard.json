{
	"name": "SC_idle_time_seayard",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "ecevents"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink5"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "window1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "window2"
				},
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "select5"
				},
				{
					"name": "alterRow5"
				},
				{
					"name": "filter7"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ecEventGkey as long,",
				"          yardGkey as long,",
				"          YardID as string,",
				"          FcyID as string,",
				"          cheKind as string,",
				"          cheName as string,",
				"          cheID as long,",
				"          EcEventTime as timestamp,",
				"          type as short,",
				"          subType as short,",
				"          typeDescription as string,",
				"          fromCheIdName as string,",
				"          ToCheIdName as string,",
				"          unitIdName as string,",
				"          powName as string,",
				"          poolName as string,",
				"          workQueue as string,",
				"          travelDistance as short,",
				"          moveKind as string,",
				"          isTwinMove as boolean,",
				"          startDistance as short,",
				"          unitReference as string,",
				"          tranId as string,",
				"          locType as string,",
				"          locId as string,",
				"          locSlot as string,",
				"          opsPosId as string,",
				"          unladenLoctype as string,",
				"          unladenLocid as string,",
				"          unladenLocSlot as string,",
				"          ladenLoctype as string,",
				"          ladenLocid as string,",
				"          ladenLocSlot as string,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer,",
				"          operator_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     fileSystem: 'seayard',",
				"     folderPath: 'silver/ecevents') ~> ecevents",
				"ecevents filter(cheKind == 'SC') ~> filter1",
				"window2 pivot(groupBy(unitIdName,",
				"          GroupNumber,",
				"          moveKind),",
				"     pivotBy(typeDescription),",
				"     {_} = first(derivedColumn4@EcEventTime),",
				"          unladen = first(startDistance),",
				"          laden = first(travelDistance),",
				"     columnNaming: '$N$V_Time',",
				"     lateral: false) ~> pivot1",
				"derivedColumn4 window(over(cheID,",
				"          EcEventDate),",
				"     asc(cheID, true),",
				"     asc(EcEventTime, true),",
				"     rangeSpecified: true,",
				"     startRowOffset: 1L,",
				"     EcEventTime_PREV = lag(EcEventTime, 1, null()),",
				"          EcEventTime_NEXT = lead(EcEventTime, 1, null()),",
				"          typeDescription_PREV = lag(typeDescription, 1, null()),",
				"          typeDescription_NEXT = lead(typeDescription, 1, null()),",
				"          cheID_PREV = lag(cheID, 1, null()),",
				"          cheID_NEXT = lead(cheID, 1, null()),",
				"          EcEventDate_PREV = lag(EcEventDate, 1, null()),",
				"          EcEventDate_NEXT = lead(EcEventDate, 1, null())) ~> window1",
				"window1 derive(TimeDeltaMins = :time_delta_mins,",
				"          TimeGroupFlag = iif(isNull(EcEventTime_PREV) || :time_delta_mins > toLong(24*60), 1, 0),",
				"          drop_time = ERROR_FUNCTION(''),",
				"          time_delta_mins := (toLong(derivedColumn4@EcEventTime) - toLong(EcEventTime_PREV))/(60*1000)) ~> derivedColumn3",
				"derivedColumn3 window(over(unitIdName),",
				"     asc(derivedColumn4@EcEventTime, true),",
				"     GroupNumber = sum(TimeGroupFlag)) ~> window2",
				"pivot1 derive(DROP_Time = toTimestamp(byName('_DROP_Time')),",
				"          DSPT_Time = toTimestamp(byName('_DSPT_Time')),",
				"          EARW_Time = toTimestamp(byName('_EARW_Time')),",
				"          EASH_Time = toTimestamp(byName('_EASH_Time')),",
				"          UnladenDistance = iif(moveKind == 'DSCH', iifNull(toShort(byName('unladenLTRW_Time')), toShort(byName('unladenLARW_Time'))), iif(moveKind == 'LOAD', iifNull(toShort(byName('unladenLTSH_Time')), toShort(byName('unladenLASH_Time'))), toShort(999))),",
				"          LadenDistance = iif(moveKind == 'DSCH', iifNull(toShort(byName('ladenLTRW_Time')), toShort(byName('ladenLARW_Time'))), iif(moveKind == 'LOAD', iifNull(toShort(byName('ladenLTSH_Time')), toShort(byName('ladenLASH_Time'))), toShort(999)))) ~> MapDrifted2",
				"MapDrifted2 select(mapColumn(",
				"          unitIdName,",
				"          GroupNumber,",
				"          moveKind,",
				"          UnladenDistance,",
				"          LadenDistance,",
				"          Timestamp = MapDrifted1@TimeStamp,",
				"          Date,",
				"          Year,",
				"          Month,",
				"          Week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"filter7 alterRow(upsertIf(true())) ~> alterRow5",
				"select5 filter(not(isNull(UnladenDistance) && isNull(LadenDistance))) ~> filter7",
				"filter1 derive(EcEventDate = toDate(toString(EcEventTime,'yyyy-MM-dd'),'yyyy-MM-dd'),",
				"          EcEventTimepart = toString(EcEventTime,'HH:mm:ss')) ~> derivedColumn4",
				"alterRow5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'tauranga',",
				"     folderPath: 'gold/sc_laden_unladen',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['unitIdName','moveKind','Timestamp'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          Year,",
				"          Month,",
				"          Week",
				"     )) ~> sink5"
			]
		}
	}
}