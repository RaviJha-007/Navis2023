{
	"name": "SC_load_dsch_tauranga_new",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "ecevents"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "split1"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ecEventGkey as long,",
				"          yardGkey as long,",
				"          YardID as string,",
				"          FcyID as string,",
				"          cheKind as string,",
				"          cheName as string,",
				"          cheID as long,",
				"          EcEventTime as timestamp,",
				"          type as short,",
				"          subType as short,",
				"          typeDescription as string,",
				"          fromCheIdName as boolean,",
				"          ToCheIdName as boolean,",
				"          unitIdName as string,",
				"          powName as string,",
				"          poolName as string,",
				"          workQueue as string,",
				"          travelDistance as short,",
				"          moveKind as string,",
				"          isTwinMove as boolean,",
				"          startDistance as short,",
				"          workAssignmentId as long,",
				"          unitReference as string,",
				"          tranId as string,",
				"          locType as string,",
				"          locId as string,",
				"          locSlot as string,",
				"          opsPosId as string,",
				"          unladenLoctype as string,",
				"          unladenLocid as string,",
				"          unladenLocSlot as string,",
				"          ladenLoctype as string,",
				"          ladenLocid as string,",
				"          ladenLocSlot as string,",
				"          lastEstMoveTime as string,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     fileSystem: 'tauranga',",
				"     folderPath: 'silver/ecevents') ~> ecevents",
				"ecevents filter(cheKind == 'SC' && (moveKind == 'DSCH' || moveKind == 'LOAD') && (typeDescription=='EARW' || typeDescription=='EASH' || typeDescription=='DSPT' || typeDescription=='DROP')) ~> filter1",
				"aggregate1 alterRow(upsertIf(true())) ~> alterRow3",
				"filter1 pivot(groupBy(unitIdName,",
				"          moveKind),",
				"     pivotBy(typeDescription),",
				"     {} = max(EcEventTime),",
				"     columnNaming: '$N$V_Time',",
				"     lateral: false) ~> pivot1",
				"split1@loadMoves derive({Drop-Dspt} = iifNull(round((DROP_Time - DSPT_Time)/60000,2), 0) ,",
				"          {Earw-Dspt} = round((EARW_Time - DSPT_Time)/60000,2)) ~> derivedColumn1",
				"MapDrifted1 aggregate(groupBy(unitIdName),",
				"     WorkTime = ERROR_FUNCTION('')) ~> aggregate1",
				"MapDrifted1 split(moveKind  == \"LOAD\",",
				"     disjoint: true) ~> split1@(loadMoves, shiftMoves)",
				"pivot1 derive(DROP_Time = toTimestamp(byName('DROP_Time')),",
				"          DSPT_Time = toTimestamp(byName('DSPT_Time')),",
				"          EARW_Time = toTimestamp(byName('EARW_Time')),",
				"          EASH_Time = toTimestamp(byName('EASH_Time'))) ~> MapDrifted1",
				"derivedColumn1 filter(not(isNull({Earw-Dspt}))) ~> filter2",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'tauranga',",
				"     folderPath: 'gold/sc_full_time',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['ecEventGkey','Date'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}