{
	"name": "SC_load_dsch_tauranga_new",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "ecevents"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink3"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "select1"
				},
				{
					"name": "split2"
				},
				{
					"name": "select2"
				},
				{
					"name": "split3"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "alterRow4"
				},
				{
					"name": "window1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "window2"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ecEventGkey as long,",
				"          yardGkey as long,",
				"          YardID as string,",
				"          FcyID as string,",
				"          cheKind as string,",
				"          cheName as string,",
				"          cheID as long,",
				"          EcEventTime as timestamp,",
				"          type as short,",
				"          subType as short,",
				"          typeDescription as string,",
				"          fromCheIdName as boolean,",
				"          ToCheIdName as boolean,",
				"          unitIdName as string,",
				"          powName as string,",
				"          poolName as string,",
				"          workQueue as string,",
				"          travelDistance as short,",
				"          moveKind as string,",
				"          isTwinMove as boolean,",
				"          startDistance as short,",
				"          workAssignmentId as long,",
				"          unitReference as string,",
				"          tranId as string,",
				"          locType as string,",
				"          locId as string,",
				"          locSlot as string,",
				"          opsPosId as string,",
				"          unladenLoctype as string,",
				"          unladenLocid as string,",
				"          unladenLocSlot as string,",
				"          ladenLoctype as string,",
				"          ladenLocid as string,",
				"          ladenLocSlot as string,",
				"          lastEstMoveTime as string,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     fileSystem: 'tauranga',",
				"     folderPath: 'silver/ecevents') ~> ecevents",
				"ecevents filter(cheKind == 'SC' && (moveKind == 'DSCH' || moveKind == 'LOAD') && (typeDescription=='EARW' || typeDescription=='EASH' || typeDescription=='DSPT' || typeDescription=='DROP') && unitIdName=='TGBU7476268') ~> filter1",
				"select1 alterRow(upsertIf(true())) ~> alterRow1",
				"window2 pivot(groupBy(unitIdName,",
				"          GroupNumber,",
				"          moveKind),",
				"     pivotBy(typeDescription),",
				"     {} = first(EcEventTime),",
				"     columnNaming: '$N$V_Time',",
				"     lateral: false) ~> pivot1",
				"split1@LoadMoves derive(ScLoadTime = :sc_load_time,",
				"          ScLoadUnladenTime = :sc_load_unladen_time,",
				"          ScLoadTimeRange = iif(:sc_load_time >= 0.0 && :sc_load_time <= 10.0, \"0 to 10 min\",iif(:sc_load_time > 10.0 && :sc_load_time <= 15.0, \"10 to 15 min\",iif(:sc_load_time > 15.0 && :sc_load_time <= 20.0, \"15 to 20 min\",iif(:sc_load_time > 20.0 && :sc_load_time <= 25.0, \"20 to 25 min\",iif(:sc_load_time > 25.0 && :sc_load_time <= 30.0, \"25 to 30 min\",iif(:sc_load_time > 30.0 && :sc_load_time <= 40.0, \"30 to 40 min\",iif(:sc_load_time > 40.0 && :sc_load_time <= 50.0, \"40 to 50 min\",iif(:sc_load_time > 50.0 ,\"50 & above\", \"\")))))))),",
				"          ScLoadUnladenTimeRange = iif(:sc_load_unladen_time >= 0.0 && :sc_load_unladen_time <= 10.0, \"0 to 10 min\",iif(:sc_load_unladen_time > 10.0 && :sc_load_unladen_time <= 15.0, \"10 to 15 min\",iif(:sc_load_unladen_time > 15.0 && :sc_load_unladen_time <= 20.0, \"15 to 20 min\",iif(:sc_load_unladen_time > 20.0 && :sc_load_unladen_time <= 25.0, \"20 to 25 min\",iif(:sc_load_unladen_time > 25.0 && :sc_load_unladen_time <= 30.0, \"25 to 30 min\",iif(:sc_load_unladen_time > 30.0 && :sc_load_unladen_time <= 40.0, \"30 to 40 min\",iif(:sc_load_unladen_time > 40.0 && :sc_load_unladen_time <= 50.0, \"40 to 50 min\",iif(:sc_load_unladen_time > 50.0 ,\"50 & above\", \"\")))))))),",
				"          sc_load_time := round((DROP_Time - DSPT_Time)/60000,2),",
				"          sc_load_unladen_time := round((EARW_Time - DSPT_Time)/60000,2)) ~> derivedColumn1",
				"filter2 split(moveKind  == \"LOAD\",",
				"     moveKind  == \"DSCH\",",
				"     disjoint: false) ~> split1@(LoadMoves, DschMoves)",
				"split1@DschMoves derive(ScDschTime = :sc_dsch_time,",
				"          ScDschUnladenTime = :sc_dsch_unladen_time,",
				"          ScDschTimeRange = iif(:sc_dsch_time >= 0.0 && :sc_dsch_time <= 10.0, \"0 to 10 min\",iif(:sc_dsch_time > 10.0 && :sc_dsch_time <= 15.0, \"10 to 15 min\",iif(:sc_dsch_time > 15.0 && :sc_dsch_time <= 20.0, \"15 to 20 min\",iif(:sc_dsch_time > 20.0 && :sc_dsch_time <= 25.0, \"20 to 25 min\",iif(:sc_dsch_time > 25.0 && :sc_dsch_time <= 30.0, \"25 to 30 min\",iif(:sc_dsch_time > 30.0 && :sc_dsch_time <= 40.0, \"30 to 40 min\",iif(:sc_dsch_time > 40.0 && :sc_dsch_time <= 50.0, \"40 to 50 min\",iif(:sc_dsch_time > 50.0 ,\"50 & above\", \"\")))))))),",
				"          ScDschUnladenTimeRange = iif(:sc_dsch_unladen_time>= 0.0 && :sc_dsch_unladen_time<= 10.0, \"0 to 10 min\",iif(:sc_dsch_unladen_time> 10.0 && :sc_dsch_unladen_time<= 15.0, \"10 to 15 min\",iif(:sc_dsch_unladen_time> 15.0 && :sc_dsch_unladen_time<= 20.0, \"15 to 20 min\",iif(:sc_dsch_unladen_time> 20.0 && :sc_dsch_unladen_time<= 25.0, \"20 to 25 min\",iif(:sc_dsch_unladen_time> 25.0 && :sc_dsch_unladen_time<= 30.0, \"25 to 30 min\",iif(:sc_dsch_unladen_time> 30.0 && :sc_dsch_unladen_time<= 40.0, \"30 to 40 min\",iif(:sc_dsch_unladen_time> 40.0 && :sc_dsch_unladen_time<= 50.0, \"40 to 50 min\",iif(:sc_dsch_unladen_time > 50.0 ,\"50 & above\", \"\")))))))),",
				"          sc_dsch_time := round((DROP_Time - DSPT_Time)/60000,2),",
				"          sc_dsch_unladen_time := round((EASH_Time - DSPT_Time)/60000,2)) ~> derivedColumn2",
				"pivot1 derive(DROP_Time = toTimestamp(byName('DROP_Time')),",
				"          DSPT_Time = toTimestamp(byName('DSPT_Time')),",
				"          EARW_Time = toTimestamp(byName('EARW_Time')),",
				"          EASH_Time = toTimestamp(byName('EASH_Time')),",
				"          Timestamp = :Timestamp,",
				"          Date = toDate(toString(:Timestamp)),",
				"          Year = year(:Timestamp),",
				"          Month = month(:Timestamp),",
				"          Week = weekOfYear(:Timestamp),",
				"          Timestamp := toTimestamp(byName('DSPT_Time'))) ~> MapDrifted1",
				"split2@ScLoadUnladenTime select(mapColumn(",
				"          unitIdName,",
				"          moveKind,",
				"          ScLoadUnladenTime,",
				"          ScLoadUnladenTimeRange,",
				"          Timestamp,",
				"          Date,",
				"          Year,",
				"          Month,",
				"          Week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 split(not(isNull(ScLoadUnladenTime)) && ScLoadUnladenTime >= 0.0,",
				"     not(isNull(ScLoadTime)) && ScLoadTime >= 0.0,",
				"     disjoint: true) ~> split2@(ScLoadUnladenTime, ScLoadTime)",
				"split2@ScLoadTime select(mapColumn(",
				"          unitIdName,",
				"          moveKind,",
				"          Timestamp,",
				"          Date,",
				"          Year,",
				"          Month,",
				"          Week,",
				"          ScLoadTime,",
				"          ScLoadTimeRange",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn2 split(not(isNull(ScDschUnladenTime)) && ScDschUnladenTime >= 0,",
				"     not(isNull(ScDschTime)) && ScDschTime >= 0,",
				"     disjoint: false) ~> split3@(ScDschUnladenTime, ScDschTime)",
				"split3@ScDschUnladenTime select(mapColumn(",
				"          unitIdName,",
				"          moveKind,",
				"          Timestamp,",
				"          Date,",
				"          Year,",
				"          Month,",
				"          Week,",
				"          ScDschUnladenTime,",
				"          ScDschUnladenTimeRange",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"split3@ScDschTime select(mapColumn(",
				"          unitIdName,",
				"          moveKind,",
				"          Timestamp,",
				"          Date,",
				"          Year,",
				"          Month,",
				"          Week,",
				"          ScDschTime,",
				"          ScDschTimeRange",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select2 alterRow(upsertIf(true())) ~> alterRow2",
				"select3 alterRow(upsertIf(true())) ~> alterRow3",
				"select4 alterRow(upsertIf(true())) ~> alterRow4",
				"filter1 window(over(unitIdName),",
				"     asc(unitIdName, true),",
				"     asc(EcEventTime, true),",
				"     EcEventTime_PREV = lag(EcEventTime, 1, null())) ~> window1",
				"window1 derive(TimeDeltaMins = :time_delta_mins,",
				"          TimeGroupFlag = iif(isNull(EcEventTime_PREV) || :time_delta_mins > toLong(24*60), 1, 0)\r",
				",",
				"          time_delta_mins := (toLong(EcEventTime) - toLong(EcEventTime_PREV))/(60*1000)) ~> derivedColumn3",
				"derivedColumn3 window(over(unitIdName),",
				"     asc(EcEventTime, true),",
				"     GroupNumber = sum(TimeGroupFlag)) ~> window2",
				"MapDrifted1 filter(not(isNull(Timestamp))) ~> filter2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'tauranga',",
				"     folderPath: 'gold/sc_load_unladen_time',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['unitIdName','moveKind','Timestamp'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'tauranga',",
				"     folderPath: 'gold/sc_load_time',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['unitIdName','moveKind','Timestamp'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'tauranga',",
				"     folderPath: 'gold/sc_dsch_unladen_time',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['unitIdName','moveKind','Timestamp'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"alterRow4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'tauranga',",
				"     folderPath: 'gold/sc_dsch_time',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['unitIdName','moveKind','Timestamp'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4"
			]
		}
	}
}