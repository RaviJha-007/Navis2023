{
	"name": "YardInventory_gpa",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "yardblock"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "vsl"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "invInYard"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ufv_gkey as long,",
				"          Facility_Id as string,",
				"          Unit_Nbr as string,",
				"          Freight_Kind_Id as string,",
				"          Category_Id as string,",
				"          Unit_Visit_State_Id as string,",
				"          Unit_Transit_State_Id as string,",
				"          Unit_In_Facility_Time as string,",
				"          Unit_Facility_Departed_Time as string,",
				"          Time_Of_Last_Move as string,",
				"          Unit_Facility_Visit_Retired as string,",
				"          Arrive_Pos_Loctype as string,",
				"          Last_Pos_Loctype as string,",
				"          LAST_POS_BIN as long,",
				"          Actual_Inbound_CV_Key as long,",
				"          Actual_Outbound_CV_Key as long,",
				"          Intended_Outbound_CV_Key as long,",
				"          Goods_And_Ctr_Wt_Kg as double,",
				"          POD as string,",
				"          POL as string,",
				"          Damage_Flag as string,",
				"          Hazardous_Flag as string,",
				"          Requires_Power_Flag as short,",
				"          OOG_Flag as short",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'gpa',",
				"     folderPath: 'bronze/invInYard/load/',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source1",
				"source(output(",
				"          Complex_Id as string,",
				"          Facility_Id as string,",
				"          Yard_Id as string,",
				"          mdl_bin_subclass as string,",
				"          mdl_bin_level as short,",
				"          mdl_status as string,",
				"          mdl_pos_name as string,",
				"          mdl_pos_gkey as long,",
				"          blk_bin_subclass as string,",
				"          blk_bin_level as short,",
				"          blk_status as string,",
				"          blk_block_type as string,",
				"          label_scheme_full_position as string,",
				"          blk_pos_name as string,",
				"          blk_pos_gkey as long,",
				"          sect_bin_subclass as string,",
				"          sect_bin_level as short,",
				"          sect_status as string,",
				"          sect_pos_name as string,",
				"          sect_pos_gkey as long,",
				"          stk_bin_subclass as string,",
				"          stk_bin_level as short,",
				"          stk_status as string,",
				"          stk_pos_name as string,",
				"          stk_pos_gkey as long,",
				"          bin_type as string,",
				"          pos_gkey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'gpa',",
				"     folderPath: 'silver/yardblock') ~> yardblock",
				"source(output(",
				"          Carrier_Visit_Key as long,",
				"          Facility_Id as string,",
				"          Carrier_Visit_Id as string,",
				"          Phase as string,",
				"          Visit_Nbr as short,",
				"          Carrier_Mode as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          Time_First_Availabilty as string,",
				"          Time_Discharge_Complete as string,",
				"          Service_Id as string,",
				"          Service_Name as string,",
				"          Vessel_Id as string,",
				"          IB_VYG as string,",
				"          OB_VYG as string,",
				"          Carrier_Name as string,",
				"          Vessel_Class as string,",
				"          Published_ETA as timestamp,",
				"          Published_ETD as timestamp,",
				"          Start_Work as string,",
				"          End_Work as string,",
				"          TimeFirstAvailabilty as timestamp,",
				"          StartWork as timestamp,",
				"          TimeDischargeComplete as timestamp,",
				"          EndWork as timestamp,",
				"          Week as integer,",
				"          Year as integer,",
				"          Month as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'gpa',",
				"     folderPath: 'silver/vesselvisits') ~> vsl",
				"source1 filter(Facility_Id=='GCT') ~> filter1",
				"filter1, yardblock join(LAST_POS_BIN == pos_gkey,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join2 select(mapColumn(",
				"          ufv_gkey,",
				"          Facility_Id = source1@Facility_Id,",
				"          Unit_Nbr,",
				"          Freight_Kind_Id,",
				"          Category_Id,",
				"          Unit_Visit_State_Id,",
				"          Unit_Transit_State_Id,",
				"          Unit_In_Facility_Time,",
				"          Unit_Facility_Departed_Time,",
				"          Time_Of_Last_Move,",
				"          Unit_Facility_Visit_Retired,",
				"          Arrive_Pos_Loctype,",
				"          Last_Pos_Loctype,",
				"          LAST_POS_BIN,",
				"          Actual_Inbound_CV_Key,",
				"          Actual_Outbound_CV_Key,",
				"          Intended_Outbound_CV_Key,",
				"          Goods_And_Ctr_Wt_Kg,",
				"          POD,",
				"          POL,",
				"          Damage_Flag,",
				"          Hazardous_Flag,",
				"          Requires_Power_Flag,",
				"          OOG_Flag,",
				"          Complex_Id,",
				"          mdl_status,",
				"          mdl_pos_name,",
				"          mdl_pos_gkey,",
				"          blk_bin_level,",
				"          blk_status,",
				"          blk_block_type,",
				"          label_scheme_full_position,",
				"          blk_pos_name,",
				"          blk_pos_gkey,",
				"          sect_bin_level,",
				"          sect_status,",
				"          sect_pos_name,",
				"          sect_pos_gkey,",
				"          stk_bin_level,",
				"          stk_status,",
				"          stk_pos_name,",
				"          stk_pos_gkey,",
				"          pos_gkey,",
				"          Carrier_Visit_Id,",
				"          Service_Id,",
				"          Carrier_Mode,",
				"          Vessel_Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
				"select1 derive(SnapshotDate = currentDate()) ~> derivedColumn1",
				"vsl select(mapColumn(",
				"          Carrier_Visit_Key,",
				"          Facility_Id,",
				"          Carrier_Visit_Id,",
				"          Phase,",
				"          Visit_Nbr,",
				"          Carrier_Mode,",
				"          Service_Id,",
				"          Service_Name,",
				"          Vessel_Id,",
				"          Carrier_Name,",
				"          Vessel_Class,",
				"          Published_ETA,",
				"          Published_ETD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"join1, select2 join(Intended_Outbound_CV_Key == Carrier_Visit_Key,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> join2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Complex_Id as string,",
				"          Facility_Id as string,",
				"          Yard_Id as string,",
				"          mdl_bin_subclass as string,",
				"          mdl_bin_level as short,",
				"          mdl_status as string,",
				"          mdl_pos_name as string,",
				"          mdl_pos_gkey as long,",
				"          blk_bin_subclass as string,",
				"          blk_bin_level as short,",
				"          blk_status as string,",
				"          blk_block_type as string,",
				"          label_scheme_full_position as string,",
				"          blk_pos_name as string,",
				"          blk_pos_gkey as long,",
				"          sect_bin_subclass as string,",
				"          sect_bin_level as short,",
				"          sect_status as string,",
				"          sect_pos_name as string,",
				"          sect_pos_gkey as long,",
				"          stk_bin_subclass as string,",
				"          stk_bin_level as short,",
				"          stk_status as string,",
				"          stk_pos_name as string,",
				"          stk_pos_gkey as long,",
				"          bin_type as string,",
				"          pos_gkey as long",
				"     ),",
				"     format: 'delta',",
				"     fileSystem: 'gpa',",
				"     folderPath: 'silver/invInYard',",
				"     truncate:true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> invInYard"
			]
		}
	}
}