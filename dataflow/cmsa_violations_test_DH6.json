{
	"name": "cmsa_violations_test_DH6",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "deckingfile"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "MoveHistory"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "RemoveExtraColumns"
				},
				{
					"name": "DHDeckingPos"
				},
				{
					"name": "DH4",
					"description": "RemoveTOPOSNameANDTimeStamp\n\nRemove TOPOSName\nand \nTimeStamp"
				},
				{
					"name": "MH2",
					"description": "MERemoveExtraColumns\nRenaming MoveHistory to MH2 with columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name, Put CHE Operator Id, Put CHE Id'"
				},
				{
					"name": "MH4",
					"description": "TPutDate\nCreating/updating the columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name, Put CHE Operator Id, Put CHE Id'"
				},
				{
					"name": "MH5",
					"description": "SortUnitId\nSorting rows on columns 'Unit Nbr, t_put'"
				},
				{
					"name": "MH6",
					"description": "MHDeckingPosName\nCreating/updating the columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name'"
				},
				{
					"name": "DH6"
				},
				{
					"name": "DH11"
				},
				{
					"name": "MH3"
				},
				{
					"name": "DH5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          gkey as integer,",
				"          uyv_gkey as integer,",
				"          unit_id as string,",
				"          time_stamp as string,",
				"          decking_type as string,",
				"          node_id as string,",
				"          yard as string,",
				"          from_pos_loctype as string,",
				"          from_pos_locid as string,",
				"          from_pos_loc_gkey as integer,",
				"          from_pos_slot as string,",
				"          from_pos_name as string,",
				"          from_pos_bin as string,",
				"          from_pos_tier as short,",
				"          to_pos_loctype as string,",
				"          to_pos_locid as string,",
				"          to_pos_loc_gkey as integer,",
				"          to_pos_slot as string,",
				"          to_pos_name as string,",
				"          to_pos_bin as string,",
				"          to_pos_tier as short,",
				"          total_score as short,",
				"          execution_time as short,",
				"          details as string,",
				"          phase as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'cmsa-violations',",
				"     folderPath: 'bronze/violations-decking/load',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> deckingfile",
				"source(output(",
				"          {Unit Nbr} as string,",
				"          {Facility Id} as string,",
				"          {Complex Id} as string,",
				"          {Yard Id} as string,",
				"          {Carrier Visit Key} as string,",
				"          {Event Type Id} as string,",
				"          {Move Kind} as string,",
				"          {From Location} as string,",
				"          {To Location} as string,",
				"          {From Position Name} as string,",
				"          {To Position Name} as string,",
				"          {Carry CHE Operator Id} as string,",
				"          {Fetch CHE Operator Id} as string,",
				"          {Put CHE Operator Id} as string,",
				"          {Fetch CHE Id} as string,",
				"          {Fetch CHE Kind} as string,",
				"          {Carry CHE Id} as string,",
				"          {Carry CHE Kind} as string,",
				"          {Put CHE Id} as string,",
				"          {Put CHE Kind} as string,",
				"          {QC CHE Id} as string,",
				"          {QC CHE Kind} as string,",
				"          t_carry_complete as string,",
				"          t_put as string,",
				"          t_fetch as string,",
				"          t_dispatch as string,",
				"          t_discharge as string,",
				"          t_carry_dispatch as string,",
				"          t_carry_fetch_ready as string,",
				"          t_carry_put_ready as string,",
				"          dist_carry as short,",
				"          dist_start as short,",
				"          {Twin Fetch} as boolean,",
				"          {Twin Carry} as boolean,",
				"          {Twin Put} as boolean,",
				"          {Category Id} as string,",
				"          {Freight Kind Id} as string,",
				"          to_pos_gkey as string,",
				"          fm_pos_gkey as string,",
				"          {Restow Reason} as string,",
				"          {Container Line Id} as string,",
				"          {Container Line Role} as string,",
				"          pow as string,",
				"          mve_gkey as integer,",
				"          ufv_gkey as integer,",
				"          {Berth Id} as string,",
				"          {Goods And Ctr Wt Kg} as double,",
				"          active_ufv as integer,",
				"          {Requires Power Flag} as boolean,",
				"          {OOG Flag} as boolean,",
				"          {Shipper Id} as string,",
				"          {Consignee Id} as string,",
				"          {Commodity Id} as string,",
				"          ATA as string,",
				"          ATD as string,",
				"          Rehandles as short",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'cmsa-violations',",
				"     folderPath: 'bronze/violations-moves/load',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> MoveHistory",
				"deckingfile select(mapColumn(",
				"          gkey,",
				"          unit_id,",
				"          time_stamp,",
				"          decking_type,",
				"          to_pos_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveExtraColumns",
				"RemoveExtraColumns derive(DeckingPosName = substring(to_pos_name,8),",
				"          DeckingDateTime = toTimestamp(time_stamp,'yyyy mm dd HH:mm:ss.SSS'),",
				"          Decking_Time_Outer_Limit = toTimestamp(time_stamp,'yyyy mm dd HH:mm:ss.SSS') + hours(5)) ~> DHDeckingPos",
				"DHDeckingPos select(mapColumn(",
				"          Gkey = gkey,",
				"          Unit_Id = unit_id,",
				"          Decking_Date_Time = DeckingDateTime,",
				"          Decking_Type = decking_type,",
				"          Decking_Pos_Name = DeckingPosName,",
				"          Decking_Time_Outer_Limit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DH4",
				"MoveHistory select(mapColumn(",
				"          Unit_Nbr = {Unit Nbr},",
				"          T_Put = t_put,",
				"          Event_Type_Id = {Event Type Id},",
				"          Move_Kind = {Move Kind},",
				"          From_Position_Name = {From Position Name},",
				"          To_Position_Name = {To Position Name},",
				"          Put_CHE_Operator_Id = {Put CHE Operator Id},",
				"          Put_CHE_Id = {Put CHE Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MH2",
				"MH3 derive(MH_Date = toTimestamp(T_Put,'yyyy mm dd HH:mm:ss.SSS')) ~> MH4",
				"MH4 sort(asc(Unit_Nbr, true),",
				"     asc(MH_Date, true)) ~> MH5",
				"MH5 derive(To_Position_Name = substring(To_Position_Name,8),",
				"          MH_Date_Less_3_Hours = toTimestamp(T_Put,'yyyy mm dd HH:mm:ss.SSS') - hours(3)) ~> MH6",
				"DH5, MH6 join(Unit_Id == Unit_Nbr",
				"     && Decking_Date_Time <= MH_Date",
				"     && Decking_Time_Outer_Limit >= MH_Date,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> DH6",
				"DH6 alterRow(insertIf(true())) ~> DH11",
				"MH2 filter((Move_Kind == 'RECV' || Move_Kind == 'DSCH')) ~> MH3",
				"DH4 filter(Decking_Pos_Name!='FLD') ~> DH5",
				"DH11 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'cmsa-violations',",
				"     folderPath: 'silver/DH6Test',",
				"     deltaTruncate: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['gkey'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Gkey,",
				"          Unit_Id,",
				"          Decking_Date_Time,",
				"          Decking_Type,",
				"          Decking_Pos_Name,",
				"          Decking_Time_Outer_Limit,",
				"          Unit_Nbr,",
				"          T_Put,",
				"          Event_Type_Id,",
				"          Move_Kind,",
				"          From_Position_Name,",
				"          To_Position_Name,",
				"          Put_CHE_Operator_Id,",
				"          Put_CHE_Id,",
				"          MH_Date",
				"     )) ~> sink1"
			]
		}
	}
}