{
	"name": "delete_flow_mnhpi",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "violation"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "moves"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "decking"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "rehandle"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "ttprod"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "movesrc"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink3"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink4"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink5"
				},
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink6"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "filter3"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "alterRow4"
				},
				{
					"name": "filter5"
				},
				{
					"name": "alterRow5"
				},
				{
					"name": "filter6"
				},
				{
					"name": "alterRow6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          D_H_Decking_Type as string,",
				"          MH_ToPosName_Short_5Char as string,",
				"          DH_ToPosName_Short_5Char as string,",
				"          MH_Unit_Nbr as string,",
				"          MH_Move_Kind as string,",
				"          Category_Id as string,",
				"          MH_T_Put_DateTime as timestamp,",
				"          MH_Put_CHE_Operator_Id as string,",
				"          mve_gkey as integer,",
				"          MH_Put_CHE_Id as short,",
				"          Freight_Kind_Id as string,",
				"          MaxDHTime as timestamp,",
				"          Location_Match_or_Not as string,",
				"          Shift_Id as string,",
				"          Shift_Date as date,",
				"          Week_of_Year as integer,",
				"          {XPS_ECUser.name} as string,",
				"          Block_To_Block_Violation as boolean,",
				"          Same_Block_Violation as boolean,",
				"          Stack_Violation as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/violation') ~> violation",
				"source(output(",
				"          mve_gkey as integer,",
				"          Unit_Nbr as string,",
				"          Event_Type_Id as string,",
				"          Move_Kind as string,",
				"          From_Location as string,",
				"          To_Position_Name as string,",
				"          Put_CHE_Operator_Id as string,",
				"          Put_CHE_Id as short,",
				"          MH_T_Put_DateTime as timestamp,",
				"          Freight_Kind_Id as string,",
				"          Category_Id as string,",
				"          ufv_gkey as integer,",
				"          Year_Month as integer,",
				"          Year_Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/move') ~> moves",
				"source(output(",
				"          gkey as integer,",
				"          unit_id as string,",
				"          DH_TimeStamp as timestamp,",
				"          Decking_Type as string,",
				"          to_pos_name as string,",
				"          Year_Month as integer,",
				"          Year_Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/decking') ~> decking",
				"source(output(",
				"          mve_gkey as integer,",
				"          Unit_Nbr as string,",
				"          Event_Type_Id as string,",
				"          Move_Kind as string,",
				"          t_put as timestamp,",
				"          Category_Id as string,",
				"          Freight_Kind_Id as string,",
				"          Date as date,",
				"          Year_Week as integer,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/rehandle') ~> rehandle",
				"source(output(",
				"          Carry_CHE_Id as long,",
				"          CarryCompleteDate as date,",
				"          First_Lift as timestamp,",
				"          Last_Lift as timestamp,",
				"          Move_Count as long,",
				"          WorkTime as long,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/tt_productivity') ~> ttprod",
				"source(output(",
				"          mve_gkey as integer,",
				"          Unit_Nbr as string,",
				"          Facility_Id as string,",
				"          Complex_Id as string,",
				"          Yard_Id as string,",
				"          Carrier_Visit_Key as integer,",
				"          Event_Type_Id as string,",
				"          Move_Kind as string,",
				"          From_Location as string,",
				"          To_Location as string,",
				"          From_Position_Name as string,",
				"          To_Position_Name as string,",
				"          Carry_CHE_Operator_Id as short,",
				"          Fetch_CHE_Operator_Id as string,",
				"          Put_CHE_Operator_Id as string,",
				"          Fetch_CHE_Id as long,",
				"          Fetch_CHE_Kind as string,",
				"          Carry_CHE_Id as long,",
				"          Carry_CHE_Kind as string,",
				"          Put_CHE_Id as long,",
				"          Put_CHE_Kind as string,",
				"          QC_CHE_Id as long,",
				"          QC_CHE_Kind as string,",
				"          t_carry_complete as timestamp,",
				"          t_put as timestamp,",
				"          t_fetch as timestamp,",
				"          t_dispatch as timestamp,",
				"          t_discharge as timestamp,",
				"          t_carry_dispatch as timestamp,",
				"          t_carry_fetch_ready as timestamp,",
				"          t_carry_put_ready as timestamp,",
				"          dist_carry as integer,",
				"          dist_start as short,",
				"          Twin_Fetch as string,",
				"          Twin_Carry as string,",
				"          Twin_Put as string,",
				"          Category_Id as string,",
				"          Freight_Kind_Id as string,",
				"          to_pos_gkey as integer,",
				"          fm_pos_gkey as integer,",
				"          Restow_Reason as string,",
				"          Container_Line_Id as string,",
				"          Container_Line_Role as string,",
				"          pow as string,",
				"          ufv_gkey as integer,",
				"          Berth_Id as string,",
				"          Goods_And_Ctr_Wt_Kg as double,",
				"          active_ufv as integer,",
				"          Requires_Power_Flag as string,",
				"          OOG_Flag as string,",
				"          Shipper_Id as string,",
				"          Consignee_Id as string,",
				"          Commodity_Id as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          Rehandles as string,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'silver/moves') ~> movesrc",
				"violation filter(Shift_Date >= toDate('27-11-2024', 'dd-mm-yyyy')) ~> filter1",
				"filter1 alterRow(deleteIf(true())) ~> alterRow1",
				"moves filter(toDate(MH_T_Put_DateTime) >= toDate('27-11-2024', 'dd-mm-yyyy')) ~> filter2",
				"filter2 alterRow(deleteIf(true())) ~> alterRow2",
				"decking filter(toDate(DH_TimeStamp) >= toDate('27-11-2024', 'dd-mm-yyyy')) ~> filter3",
				"filter3 alterRow(deleteIf(true())) ~> alterRow3",
				"rehandle filter(Date >= toDate('20-10-2024', 'dd-mm-yyyy')) ~> filter4",
				"filter4 alterRow(deleteIf(true())) ~> alterRow4",
				"ttprod filter(CarryCompleteDate >= toDate('20-10-2024', 'dd-mm-yyyy')) ~> filter5",
				"filter5 alterRow(deleteIf(true())) ~> alterRow5",
				"movesrc filter(toDate(t_put) >= toDate('20-10-2024', 'dd-mm-yyyy')) ~> filter6",
				"filter6 alterRow(deleteIf(true())) ~> alterRow6",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/violation',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['mve_gkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/move',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['mve_gkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/decking',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['gkey','DH_TimeStamp','Year_Month','Year_Week'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"alterRow4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     folderPath: 'gold/rehandle',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['mve_gkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4",
				"alterRow5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/tt_productivity',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['CarryCompleteDate','Carry_CHE_Id','First_Lift','Last_Lift','Year','Month','Week'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink5",
				"alterRow6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'silver/moves',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['mve_gkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink6"
			]
		}
	}
}