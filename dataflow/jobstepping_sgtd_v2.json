{
	"name": "jobstepping_sgtd_v2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "navispowerbidata2-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "window1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ecEventGkey as long,",
				"          yardGkey as integer,",
				"          YardID as string,",
				"          FcyID as string,",
				"          cheKind as string,",
				"          CHE_Name as string,",
				"          eventType as short,",
				"          eventSubType as short,",
				"          eventTypeDescription as string,",
				"          fromCheIdName as boolean,",
				"          ToCheIdName as boolean,",
				"          unit as string,",
				"          pow as string,",
				"          pool as string,",
				"          workQueue as string,",
				"          travelDistance as short,",
				"          moveKind as string,",
				"          isTwin as boolean,",
				"          startDistance as short,",
				"          workAssignment as long,",
				"          unitRef as string,",
				"          tran_ID as string,",
				"          locType as string,",
				"          locID as string,",
				"          locSlot as string,",
				"          opsPosID as string,",
				"          unladenLoctype as string,",
				"          unladenLocID as string,",
				"          unladenLocSlot as string,",
				"          ladenLoctype as string,",
				"          ladenLocID as string,",
				"          laden_LocSlot as string,",
				"          lastEstMoveTime as string,",
				"          EcEventTime as timestamp,",
				"          cheID as long,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer,",
				"          operator_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'silver/ecevents_v2') ~> source1",
				"source(output(",
				"          GKEY as integer,",
				"          USER_ID as string,",
				"          NAME as string,",
				"          YARD as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delimited',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'bronze/xpsecuser',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source2",
				"filter2 filter(cheKind==\"ITV\" && (eventTypeDescription==\"AYDR\" || eventTypeDescription==\"TYDR\" || eventTypeDescription==\"AYCO\" || eventTypeDescription==\"TYCO\" || eventTypeDescription==\"AVDR\" || eventTypeDescription==\"TVDR\" || eventTypeDescription==\"AVCO\" || eventTypeDescription==\"TVCO\") && (moveKind==\"DSCH\"||moveKind==\"LOAD\")) ~> filter1",
				"sort1 window(asc(cheID, true),",
				"     asc(EcEventTime, true),",
				"     asc(ecEventGkey, true),",
				"     startRowOffset: 1L,",
				"     endRowOffset: 1L,",
				"     eventTypeDescription_nxt = lead(eventTypeDescription),",
				"          unit_nxt = lead(unit),",
				"          cheID_nxt = lead(cheID),",
				"          EcEventTime_nxt = lead(EcEventTime)) ~> window1",
				"filter1 sort(asc(cheID, true),",
				"     asc(EcEventTime, true),",
				"     asc(ecEventGkey, true)) ~> sort1",
				"window1 derive(jobStep = iif(cheID==cheID_nxt && unit==unit_nxt && eventTypeDescription=='TYCO' && eventTypeDescription_nxt=='AYCO', 1,iif(cheID==cheID_nxt && unit==unit_nxt && eventTypeDescription=='TVDR' && eventTypeDescription_nxt=='AVDR',1,iif(cheID==cheID_nxt && unit==unit_nxt && eventTypeDescription=='TYDR' && eventTypeDescription_nxt=='AYDR',1,iif(cheID==cheID_nxt && unit==unit_nxt && eventTypeDescription=='TVCO' && eventTypeDescription_nxt=='AVCO',1,0))))) ~> derivedColumn1",
				"select1 alterRow(upsertIf(true())) ~> AlterRow1",
				"join1 select(mapColumn(",
				"          ecEventGkey,",
				"          yardGkey,",
				"          YardID,",
				"          FcyID,",
				"          cheKind,",
				"          CHE_Name,",
				"          eventType,",
				"          eventSubType,",
				"          eventTypeDescription,",
				"          unit,",
				"          pow,",
				"          pool,",
				"          workQueue,",
				"          travelDistance,",
				"          moveKind,",
				"          isTwin,",
				"          startDistance,",
				"          EcEventTime,",
				"          cheID,",
				"          Year,",
				"          Month,",
				"          Week,",
				"          eventTypeDescription_nxt,",
				"          unit_nxt,",
				"          cheID_nxt,",
				"          EcEventTime_nxt,",
				"          jobStep,",
				"          OPERATOR_ID = operator_name,",
				"          USER_ID,",
				"          OPERATOR_NAME = NAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 select(mapColumn(",
				"          GKEY,",
				"          USER_ID,",
				"          NAME,",
				"          YARD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn1, select2 join(lower(operator_name) == lower(USER_ID),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'off')~> join1",
				"source1 filter(Year >=2025 && Week >=28 && Month >= 7) ~> filter2",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'gold/jobstep_v2',",
				"     mergeSchema: true,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: true,",
				"     upsertable: true,",
				"     keys:['ecEventGkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          Year,",
				"          Month,",
				"          Week",
				"     )) ~> sink1"
			]
		}
	}
}