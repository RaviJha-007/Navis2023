{
	"name": "renomination",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GKEY as long,",
				"          OPERATOR_GKEY as long,",
				"          COMPLEX_GKEY as long,",
				"          FACILITY_GKEY as long,",
				"          YARD_GKEY as long,",
				"          PLACED_BY as string,",
				"          PLACED_TIME as string,",
				"          EVENT_TYPE_GKEY as double,",
				"          APPLIED_TO_CLASS as string,",
				"          APPLIED_TO_GKEY as double,",
				"          APPLIED_TO_NATURAL_KEY as string,",
				"          NOTE as string,",
				"          BILLING_EXTRACT_BATCH_ID as double,",
				"          QUANTITY as string,",
				"          QUANTITY_UNIT as string,",
				"          RESPONSIBLE_PARTY as string,",
				"          RELATED_ENTITY_GKEY as double,",
				"          RELATED_ENTITY_ID as string,",
				"          RELATED_ENTITY_CLASS as string,",
				"          RELATED_BATCH_ID as double,",
				"          ACKNOWLEDGED as string,",
				"          ACKNOWLEDGED_BY as string,",
				"          FLEX_STRING01 as string,",
				"          FLEX_STRING02 as string,",
				"          FLEX_STRING03 as string,",
				"          FLEX_STRING04 as string,",
				"          FLEX_STRING05 as string,",
				"          FLEX_DATE01 as string,",
				"          FLEX_DATE02 as string,",
				"          FLEX_DATE03 as string,",
				"          FLEX_DOUBLE01 as string,",
				"          FLEX_DOUBLE02 as string,",
				"          FLEX_DOUBLE03 as string,",
				"          FLEX_DOUBLE04 as string,",
				"          FLEX_DOUBLE05 as string,",
				"          CREATED as string,",
				"          CREATOR as string,",
				"          CHANGED as string,",
				"          CHANGER as string,",
				"          PRIMARY_EVENT_GKEY as string,",
				"          NODE_ID as string,",
				"          {Unnamed: 0} as string,",
				"          {Unnamed: 1} as string,",
				"          {Unnamed: 2} as string,",
				"          {Unnamed: 3} as string,",
				"          {Unnamed: 4} as string,",
				"          {Unnamed: 5} as string,",
				"          {Unnamed: 6} as string,",
				"          {Unnamed: 7} as string,",
				"          {Unnamed: 8} as string,",
				"          {Unnamed: 9} as string,",
				"          {Unnamed: 10} as string,",
				"          {Unnamed: 11} as string,",
				"          {Unnamed: 12} as string,",
				"          {Unnamed: 13} as string,",
				"          {Unnamed: 14} as string,",
				"          {Unnamed: 15} as string,",
				"          {Unnamed: 16} as string,",
				"          {Unnamed: 17} as string,",
				"          {Unnamed: 18} as string,",
				"          {Unnamed: 19} as string,",
				"          {Unnamed: 20} as string,",
				"          {Unnamed: 21} as string,",
				"          {Unnamed: 22} as string,",
				"          {Unnamed: 23} as string,",
				"          {Unnamed: 24} as string,",
				"          {Unnamed: 25} as string,",
				"          {Unnamed: 26} as string,",
				"          {Unnamed: 27} as string,",
				"          {Unnamed: 28} as string,",
				"          {Unnamed: 29} as string,",
				"          {Unnamed: 30} as string,",
				"          {Unnamed: 31} as string,",
				"          {Unnamed: 32} as string,",
				"          {Unnamed: 33} as string,",
				"          {Unnamed: 34} as string,",
				"          {Unnamed: 35} as string,",
				"          {Unnamed: 36} as string,",
				"          {Unnamed: 37} as string,",
				"          {Unnamed: 38} as string,",
				"          {Unnamed: 39} as string,",
				"          {Unnamed: 40} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'bronze/renomination',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source1",
				"source(output(",
				"          {Unit Nbr} as string,",
				"          {Facility Id} as string,",
				"          {Complex Id} as string,",
				"          {Yard Id} as string,",
				"          {Carrier Visit Key} as string,",
				"          {Event Type Id} as string,",
				"          {Move Kind} as string,",
				"          {From Location} as string,",
				"          {To Location} as string,",
				"          {From Position Name} as string,",
				"          {To Position Name} as string,",
				"          {Carry CHE Operator Id} as string,",
				"          {Fetch CHE Operator Id} as string,",
				"          {Put CHE Operator Id} as string,",
				"          {Fetch CHE Id} as short,",
				"          {Fetch CHE Kind} as string,",
				"          {Carry CHE Id} as short,",
				"          {Carry CHE Kind} as string,",
				"          {Put CHE Id} as short,",
				"          {Put CHE Kind} as string,",
				"          {QC CHE Id} as short,",
				"          {QC CHE Kind} as string,",
				"          t_carry_complete as string,",
				"          t_put as string,",
				"          t_fetch as string,",
				"          t_dispatch as string,",
				"          t_discharge as string,",
				"          t_carry_dispatch as string,",
				"          t_carry_fetch_ready as string,",
				"          t_carry_put_ready as string,",
				"          dist_carry as short,",
				"          dist_start as boolean,",
				"          {Twin Fetch} as boolean,",
				"          {Twin Carry} as boolean,",
				"          {Twin Put} as boolean,",
				"          {Category Id} as string,",
				"          {Freight Kind Id} as string,",
				"          to_pos_gkey as integer,",
				"          fm_pos_gkey as integer,",
				"          {Restow Reason} as string,",
				"          {Container Line Id} as string,",
				"          {Container Line Role} as string,",
				"          pow as string,",
				"          mve_gkey as integer,",
				"          ufv_gkey as integer,",
				"          {Berth Id} as string,",
				"          {Goods And Ctr Wt Kg} as integer,",
				"          active_ufv as integer,",
				"          {Requires Power Flag} as boolean,",
				"          {OOG Flag} as boolean,",
				"          {Shipper Id} as string,",
				"          {Consignee Id} as string,",
				"          {Commodity Id} as string,",
				"          ATA as string,",
				"          ATD as string,",
				"          Rehandles as short",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     moveFiles: ['/bronze/moves/load','/bronze/moves/archive'],",
				"     format: 'delimited',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'bronze/moves/load',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source2",
				"source1 select(mapColumn(",
				"          GKEY,",
				"          APPLIED_TO_CLASS,",
				"          NOTE,",
				"          PLACED = PLACED_TIME,",
				"          PLACER = PLACED_BY,",
				"          CREATED,",
				"          CREATOR,",
				"          CHANGED,",
				"          CHANGER,",
				"          NODE_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 select(mapColumn(",
				"          {Unit Nbr},",
				"          {Facility Id},",
				"          {Complex Id},",
				"          {Yard Id},",
				"          {Carrier Visit Key},",
				"          {Event Type Id},",
				"          {Move Kind},",
				"          {From Location},",
				"          {To Location},",
				"          {From Position Name},",
				"          {To Position Name},",
				"          {Carry CHE Operator Id},",
				"          {Fetch CHE Operator Id},",
				"          {Put CHE Operator Id},",
				"          {Fetch CHE Id},",
				"          {Fetch CHE Kind},",
				"          {Carry CHE Id},",
				"          {Carry CHE Kind},",
				"          {Put CHE Id},",
				"          {Put CHE Kind},",
				"          {QC CHE Id},",
				"          {QC CHE Kind},",
				"          t_carry_complete,",
				"          t_put,",
				"          t_fetch,",
				"          t_dispatch,",
				"          t_discharge,",
				"          t_carry_dispatch,",
				"          t_carry_fetch_ready,",
				"          t_carry_put_ready,",
				"          dist_carry,",
				"          dist_start,",
				"          {Twin Fetch},",
				"          {Twin Carry},",
				"          {Twin Put},",
				"          {Category Id},",
				"          {Freight Kind Id},",
				"          to_pos_gkey,",
				"          fm_pos_gkey,",
				"          {Restow Reason},",
				"          {Container Line Id},",
				"          {Container Line Role},",
				"          pow,",
				"          mve_gkey,",
				"          ufv_gkey,",
				"          {Berth Id},",
				"          {Goods And Ctr Wt Kg},",
				"          active_ufv,",
				"          {Requires Power Flag},",
				"          {OOG Flag},",
				"          {Shipper Id},",
				"          {Consignee Id},",
				"          {Commodity Id},",
				"          ATA,",
				"          ATD,",
				"          Rehandles",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 filter(ERROR_FUNCTION('')) ~> filter1",
				"select2 filter(ERROR_FUNCTION('')) ~> filter2"
			]
		}
	}
}