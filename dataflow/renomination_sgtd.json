{
	"name": "renomination_sgtd",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "split1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GKEY as long,",
				"          OPERATOR_GKEY as long,",
				"          COMPLEX_GKEY as long,",
				"          FACILITY_GKEY as long,",
				"          YARD_GKEY as long,",
				"          PLACED_BY as string,",
				"          PLACED_TIME as string,",
				"          EVENT_TYPE_GKEY as double,",
				"          APPLIED_TO_CLASS as string,",
				"          APPLIED_TO_GKEY as double,",
				"          APPLIED_TO_NATURAL_KEY as string,",
				"          NOTE as string,",
				"          BILLING_EXTRACT_BATCH_ID as double,",
				"          QUANTITY as string,",
				"          QUANTITY_UNIT as string,",
				"          RESPONSIBLE_PARTY as string,",
				"          RELATED_ENTITY_GKEY as double,",
				"          RELATED_ENTITY_ID as string,",
				"          RELATED_ENTITY_CLASS as string,",
				"          RELATED_BATCH_ID as double,",
				"          ACKNOWLEDGED as string,",
				"          ACKNOWLEDGED_BY as string,",
				"          FLEX_STRING01 as string,",
				"          FLEX_STRING02 as string,",
				"          FLEX_STRING03 as string,",
				"          FLEX_STRING04 as string,",
				"          FLEX_STRING05 as string,",
				"          FLEX_DATE01 as string,",
				"          FLEX_DATE02 as string,",
				"          FLEX_DATE03 as string,",
				"          FLEX_DOUBLE01 as string,",
				"          FLEX_DOUBLE02 as string,",
				"          FLEX_DOUBLE03 as string,",
				"          FLEX_DOUBLE04 as string,",
				"          FLEX_DOUBLE05 as string,",
				"          CREATED as string,",
				"          CREATOR as string,",
				"          CHANGED as string,",
				"          CHANGER as string,",
				"          PRIMARY_EVENT_GKEY as string,",
				"          NODE_ID as string,",
				"          {Unnamed: 0} as string,",
				"          {Unnamed: 1} as string,",
				"          {Unnamed: 2} as string,",
				"          {Unnamed: 3} as string,",
				"          {Unnamed: 4} as string,",
				"          {Unnamed: 5} as string,",
				"          {Unnamed: 6} as string,",
				"          {Unnamed: 7} as string,",
				"          {Unnamed: 8} as string,",
				"          {Unnamed: 9} as string,",
				"          {Unnamed: 10} as string,",
				"          {Unnamed: 11} as string,",
				"          {Unnamed: 12} as string,",
				"          {Unnamed: 13} as string,",
				"          {Unnamed: 14} as string,",
				"          {Unnamed: 15} as string,",
				"          {Unnamed: 16} as string,",
				"          {Unnamed: 17} as string,",
				"          {Unnamed: 18} as string,",
				"          {Unnamed: 19} as string,",
				"          {Unnamed: 20} as string,",
				"          {Unnamed: 21} as string,",
				"          {Unnamed: 22} as string,",
				"          {Unnamed: 23} as string,",
				"          {Unnamed: 24} as string,",
				"          {Unnamed: 25} as string,",
				"          {Unnamed: 26} as string,",
				"          {Unnamed: 27} as string,",
				"          {Unnamed: 28} as string,",
				"          {Unnamed: 29} as string,",
				"          {Unnamed: 30} as string,",
				"          {Unnamed: 31} as string,",
				"          {Unnamed: 32} as string,",
				"          {Unnamed: 33} as string,",
				"          {Unnamed: 34} as string,",
				"          {Unnamed: 35} as string,",
				"          {Unnamed: 36} as string,",
				"          {Unnamed: 37} as string,",
				"          {Unnamed: 38} as string,",
				"          {Unnamed: 39} as string,",
				"          {Unnamed: 40} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'bronze/renomination',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source1",
				"source(output(",
				"          mve_gkey as integer,",
				"          Unit_Nbr as string,",
				"          Facility_Id as string,",
				"          Complex_Id as string,",
				"          Yard_Id as string,",
				"          Carrier_Visit_Key as integer,",
				"          Event_Type_Id as string,",
				"          Move_Kind as string,",
				"          From_Location as string,",
				"          To_Location as string,",
				"          From_Position_Name as string,",
				"          To_Position_Name as string,",
				"          Carry_CHE_Operator_Id as short,",
				"          Fetch_CHE_Operator_Id as string,",
				"          Put_CHE_Operator_Id as string,",
				"          Fetch_CHE_Id as long,",
				"          Fetch_CHE_Kind as string,",
				"          Carry_CHE_Id as long,",
				"          Carry_CHE_Kind as string,",
				"          Put_CHE_Id as long,",
				"          Put_CHE_Kind as string,",
				"          QC_CHE_Id as long,",
				"          QC_CHE_Kind as string,",
				"          t_carry_complete as timestamp,",
				"          t_put as timestamp,",
				"          t_fetch as timestamp,",
				"          t_dispatch as timestamp,",
				"          t_discharge as timestamp,",
				"          t_carry_dispatch as timestamp,",
				"          t_carry_fetch_ready as timestamp,",
				"          t_carry_put_ready as timestamp,",
				"          dist_carry as integer,",
				"          dist_start as short,",
				"          Twin_Fetch as string,",
				"          Twin_Carry as string,",
				"          Twin_Put as string,",
				"          Category_Id as string,",
				"          Freight_Kind_Id as string,",
				"          to_pos_gkey as integer,",
				"          fm_pos_gkey as integer,",
				"          Restow_Reason as string,",
				"          Container_Line_Id as string,",
				"          Container_Line_Role as string,",
				"          pow as string,",
				"          ufv_gkey as integer,",
				"          Berth_Id as string,",
				"          Goods_And_Ctr_Wt_Kg as double,",
				"          active_ufv as integer,",
				"          Requires_Power_Flag as string,",
				"          OOG_Flag as string,",
				"          Shipper_Id as string,",
				"          Consignee_Id as string,",
				"          Commodity_Id as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          Rehandles as string,",
				"          Year as integer,",
				"          Month as integer,",
				"          Week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['/bronze/moves/load','/bronze/moves/archive'],",
				"     format: 'delta',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'silver/moves') ~> source2",
				"source1 select(mapColumn(",
				"          GKEY,",
				"          UNIT_ID = APPLIED_TO_NATURAL_KEY,",
				"          NOTE,",
				"          PLACED = PLACED_TIME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 select(mapColumn(",
				"          mve_gkey,",
				"          Unit_Nbr,",
				"          Yard_Id,",
				"          Event_Type_Id,",
				"          Move_Kind,",
				"          t_carry_complete,",
				"          t_put,",
				"          Carry_CHE_Kind,",
				"          Carry_CHE_Id,",
				"          Category_Id,",
				"          Freight_Kind_Id,",
				"          pow,",
				"          Year,",
				"          Month,",
				"          Week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 filter(not(isNull(GKEY)) && not(isNull(UNIT_ID)) && (NOTE==\"SRV_UNIT_POD_CHANGE Event Updated\" || NOTE==\"SRV_UNIT_VESSEL_CHANGE Event Updated\")) ~> filter1",
				"select2 filter(not(isNull(Unit_Nbr)) &&  (Event_Type_Id == \"UNIT_YARD_MOVE\" || Event_Type_Id == \"UNIT_YARD_SHIFT\") && (Category_Id == \"TRSHP\" || Category_Id == \"EXPRT\") && (Freight_Kind_Id == \"FCL\" || Freight_Kind_Id == \"lCL\")) ~> filter2",
				"filter2 split(Event_Type_Id == \"UNIT_YARD_MOVE\",",
				"     Event_Type_Id == \"UNIT_YARD_SHIFT\",",
				"     disjoint: true) ~> split1@(YardMove, YardShift)",
				"split1@YardMove, derivedColumn1 join(Unit_Nbr == UNIT_ID",
				"     && t_put >= PLACED,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> join1",
				"split1@YardShift, derivedColumn1 join(Unit_Nbr == UNIT_ID",
				"     && t_put >= PLACED,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> join2",
				"filter1 derive(PLACED = coalesce(toTimestamp(concat(substring(PLACED, 1, 22), ' ', substring(PLACED, 30, 2)), 'dd-MMM-yy hh.mm.ss.SSS a'),toTimestamp(PLACED,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(PLACED,'MM/dd/yyyy HH:mm:ss'),toTimestamp(PLACED,'dd-MM-yy HH:mm:ss'),toTimestamp(PLACED,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(PLACED,'dd/MM/yyyy HH:mm:ss'),toTimestamp(PLACED,'dd-MM-yyyy HH:mm:ss'))) ~> derivedColumn1",
				"join1 derive(POD_CHANGE_FLAG = iif((NOTE==\"SRV_UNIT_POD_CHANGE Event Updated\" || NOTE==\"SRV_UNIT_VESSEL_CHANGE Event Updated\"), true(), false())) ~> derivedColumn2",
				"join2 derive(POD_CHANGE_FLAG = iif(NOTE==\"SRV_UNIT_POD_CHANGE Event Updated\", true(), false()),",
				"          VESSEL_CHANGE_FLAG = iif(NOTE==\"SRV_UNIT_VESSEL_CHANGE Event Updated\", true(), false())) ~> derivedColumn3",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'gold/renomination_yard_move',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'sgtd',",
				"     folderPath: 'gold/renomination_yard_shift',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}