{
	"name": "violations_mnhpi",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "MoveHistory"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "DeckingHistory"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "ShiftData"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "ShiftInfo"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "XpsEcUser"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "violation"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "decking"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "move"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select4"
				},
				{
					"name": "join6"
				},
				{
					"name": "select5"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "AlterRow2"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "select6"
				},
				{
					"name": "select7"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "filter4"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "filter5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Unit Nbr} as string,",
				"          {Facility Id} as string,",
				"          {Complex Id} as string,",
				"          {Yard Id} as string,",
				"          {Carrier Visit Key} as integer,",
				"          {Event Type Id} as string,",
				"          {Move Kind} as string,",
				"          {From Location} as string,",
				"          {To Location} as string,",
				"          {From Position Name} as string,",
				"          {To Position Name} as string,",
				"          {Carry CHE Operator Id} as string,",
				"          {Fetch CHE Operator Id} as string,",
				"          {Put CHE Operator Id} as string,",
				"          {Fetch CHE Id} as short,",
				"          {Fetch CHE Kind} as string,",
				"          {Carry CHE Id} as short,",
				"          {Carry CHE Kind} as string,",
				"          {Put CHE Id} as short,",
				"          {Put CHE Kind} as string,",
				"          {QC CHE Id} as short,",
				"          {QC CHE Kind} as string,",
				"          t_carry_complete as timestamp,",
				"          t_put as timestamp,",
				"          t_fetch as timestamp,",
				"          t_dispatch as timestamp,",
				"          t_discharge as timestamp,",
				"          t_carry_dispatch as timestamp,",
				"          t_carry_fetch_ready as timestamp,",
				"          t_carry_put_ready as timestamp,",
				"          dist_carry as short,",
				"          dist_start as short,",
				"          {Twin Fetch} as boolean,",
				"          {Twin Carry} as boolean,",
				"          {Twin Put} as boolean,",
				"          {Category Id} as string,",
				"          {Freight Kind Id} as string,",
				"          to_pos_gkey as integer,",
				"          fm_pos_gkey as integer,",
				"          {Restow Reason} as string,",
				"          {Container Line Id} as string,",
				"          {Container Line Role} as string,",
				"          pow as string,",
				"          mve_gkey as integer,",
				"          ufv_gkey as integer,",
				"          {Berth Id} as string,",
				"          {Goods And Ctr Wt Kg} as double,",
				"          active_ufv as integer,",
				"          {Requires Power Flag} as boolean,",
				"          {OOG Flag} as boolean,",
				"          {Shipper Id} as string,",
				"          {Consignee Id} as string,",
				"          {Commodity Id} as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          Rehandles as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-movehistory',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> MoveHistory",
				"source(output(",
				"          gkey as integer,",
				"          uyv_gkey as integer,",
				"          unit_id as string,",
				"          time_stamp as timestamp,",
				"          decking_type as string,",
				"          node_id as string,",
				"          yard as boolean,",
				"          from_pos_loctype as string,",
				"          from_pos_locid as string,",
				"          from_pos_loc_gkey as integer,",
				"          from_pos_slot as string,",
				"          from_pos_name as string,",
				"          from_pos_bin as integer,",
				"          from_pos_tier as short,",
				"          to_pos_loctype as string,",
				"          to_pos_locid as string,",
				"          to_pos_loc_gkey as boolean,",
				"          to_pos_slot as string,",
				"          to_pos_name as string,",
				"          to_pos_bin as integer,",
				"          to_pos_tier as boolean,",
				"          total_score as integer,",
				"          execution_time as short,",
				"          details as string,",
				"          phase as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-deckinghistory',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> DeckingHistory",
				"source(output(",
				"          {Shift Id} as string,",
				"          Hour as integer,",
				"          Minute as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-shiftinfo',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> ShiftData",
				"source(output(",
				"          {Shift Name} as string,",
				"          {Shift Start Hour} as integer,",
				"          {Shift Start Minute} as integer,",
				"          {Shift Start} as string,",
				"          {Shift End Hour} as integer,",
				"          {Shift End Minute} as integer,",
				"          {Shift End} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-shiftdata',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> ShiftInfo",
				"source(output(",
				"          gkey as short,",
				"          user_id as string,",
				"          name as string,",
				"          yard as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-xpsuser',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> XpsEcUser",
				"MoveHistory select(mapColumn(",
				"          mve_gkey,",
				"          {Unit Nbr},",
				"          {Event Type Id},",
				"          {Move Kind},",
				"          {From Location},",
				"          {To Position Name},",
				"          {Put CHE Operator Id},",
				"          {Put CHE Id},",
				"          {MH T_Put DateTime} = t_put,",
				"          {Freight Kind Id},",
				"          {Category Id},",
				"          ufv_gkey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"aggregate3 derive(Year_Month = (year({MH T_Put DateTime}) * 100) + month({MH T_Put DateTime}),",
				"          Year_Week = (year({MH T_Put DateTime}) * 100) + weekOfYear({MH T_Put DateTime})) ~> derivedColumn1",
				"DeckingHistory select(mapColumn(",
				"          gkey,",
				"          unit_id,",
				"          {DH TimeStamp} = time_stamp,",
				"          Decking_Type = decking_type,",
				"          to_pos_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"aggregate2 filter(Decking_Type == 'Bump Intruder' || Decking_Type == 'Vessel Discharge' || Decking_Type == 'Vessel Discharge - Twin' || Decking_Type == 'XD Drop if Floating Refine' || Decking_Type == 'XD Refine Request' || Decking_Type == 'XD Rehandle Request') ~> filter1",
				"filter1 derive(Year_Month = (year({DH TimeStamp}) * 100) + month({DH TimeStamp}),",
				"          Year_Week = (year({DH TimeStamp}) * 100) + weekOfYear({DH TimeStamp})) ~> derivedColumn2",
				"derivedColumn1, derivedColumn2 join({Unit Nbr} == unit_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 filter({From Location} != 'YARD' && unit_id != '' && !startsWith(split({To Position Name}, \"-\")[3], 'CR') && {MH T_Put DateTime} > addDays({DH TimeStamp}, -15)) ~> filter2",
				"filter2 derive({MH TPut Less 4 hours} = add({MH T_Put DateTime} , -4*60*60*1000),",
				"          {DH TimeStamp Within 4 Hours} = iif(({DH TimeStamp} >= add({MH T_Put DateTime} , -4*60*60*1000)) && ({DH TimeStamp} <= {MH T_Put DateTime}), 1, 0),",
				"          {MH ToPosName Short} = split({To Position Name}, \"-\")[3],",
				"          {MH ToPosName Short 5Char} = iif(length(split({To Position Name}, \"-\")[3]) == 6, substring(split({To Position Name}, \"-\")[3], 0, 5), split({To Position Name}, \"-\")[3]),",
				"          {DH ToPosName Shorrt} = split(to_pos_name, \"-\")[3],",
				"          {DH ToPosName Short 5Char} = iif(length(split(to_pos_name, \"-\")[3]) == 6, substring(split(to_pos_name, \"-\")[3], 0, 5), split(to_pos_name, \"-\")[3])) ~> derivedColumn3",
				"derivedColumn3 filter({DH TimeStamp Within 4 Hours} == 1 && {DH ToPosName Short 5Char} != \"FLD\") ~> filter3",
				"filter3 aggregate(groupBy({Unit Nbr},",
				"          {Move Kind},",
				"          {Category Id},",
				"          {MH ToPosName Short 5Char},",
				"          {MH T_Put DateTime},",
				"          {Put CHE Operator Id},",
				"          mve_gkey,",
				"          {Put CHE Id},",
				"          {Freight Kind Id}),",
				"     MaxDHTime = max({DH TimeStamp})) ~> aggregate1",
				"filter3, aggregate1 join(aggregate3@{Unit Nbr} == aggregate1@{Unit Nbr}",
				"     && aggregate3@{Move Kind} == aggregate1@{Move Kind}",
				"     && aggregate3@{Category Id} == aggregate1@{Category Id}",
				"     && derivedColumn3@{MH ToPosName Short 5Char} == aggregate1@{MH ToPosName Short 5Char}",
				"     && aggregate3@{MH T_Put DateTime} == aggregate1@{MH T_Put DateTime}",
				"     && aggregate3@{Put CHE Operator Id} == aggregate1@{Put CHE Operator Id}",
				"     && aggregate3@mve_gkey == aggregate1@mve_gkey",
				"     && aggregate3@{Put CHE Id} == aggregate1@{Put CHE Id}",
				"     && aggregate3@{Freight Kind Id} == aggregate1@{Freight Kind Id}",
				"     && {DH TimeStamp} == MaxDHTime,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          {MH Event Type Id} = {Event Type Id},",
				"          {From Location},",
				"          {MH To Position Name} = {To Position Name},",
				"          ufv_gkey,",
				"          gkey,",
				"          unit_id,",
				"          {D H TimeStamp} = {DH TimeStamp},",
				"          {D H Decking Type} = Decking_Type,",
				"          {D H To Pos Name} = to_pos_name,",
				"          Year_Month = derivedColumn2@Year_Month,",
				"          Year_Week = derivedColumn2@Year_Week,",
				"          {MH TPut Less 4 hours},",
				"          {DH TimeStamp Within 4 Hours},",
				"          {MH ToPosName Short},",
				"          {MH ToPosName Short 5Char} = derivedColumn3@{MH ToPosName Short 5Char},",
				"          {DH ToPosName Shorrt},",
				"          {DH ToPosName Short 5Char},",
				"          {MH Unit Nbr} = aggregate1@{Unit Nbr},",
				"          {MH Move Kind} = aggregate1@{Move Kind},",
				"          {Category Id} = aggregate1@{Category Id},",
				"          {MH ToPosName Short 5Char} = aggregate1@{MH ToPosName Short 5Char},",
				"          {MH T_Put DateTime} = aggregate1@{MH T_Put DateTime},",
				"          {MH Put CHE Operator Id} = aggregate1@{Put CHE Operator Id},",
				"          mve_gkey = aggregate1@mve_gkey,",
				"          {MH Put CHE Id} = aggregate1@{Put CHE Id},",
				"          {Freight Kind Id} = aggregate1@{Freight Kind Id},",
				"          MaxDHTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive({Location Match or Not} = iif({MH ToPosName Short 5Char} == {DH ToPosName Short 5Char}, 'Position Followed', 'Position Not Followed'),",
				"          Shift_Date = toDate({MH T_Put DateTime}),",
				"          {T Put Time} = MaxDHTime,",
				"          {T Put Hour} = hour(MaxDHTime),",
				"          {T Put Minute} = minute(MaxDHTime),",
				"          {T Put Second} = second(MaxDHTime)) ~> derivedColumn4",
				"derivedColumn4, ShiftData join({T Put Hour} == Hour",
				"     && {T Put Minute} == Minute,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, ShiftInfo join({Shift Id} == {Shift Name},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 derive({Shift Date} = iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date),",
				"          Week_of_Year = year(iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date))*100 + weekOfYear(iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date))) ~> derivedColumn5",
				"join6 select(mapColumn(",
				"          {D H Decking Type},",
				"          {MH ToPosName Short 5Char},",
				"          {DH ToPosName Short 5Char},",
				"          {MH Unit Nbr},",
				"          {MH Move Kind},",
				"          {Category Id},",
				"          {MH T_Put DateTime},",
				"          {MH Put CHE Operator Id},",
				"          mve_gkey,",
				"          {MH Put CHE Id},",
				"          {Freight Kind Id},",
				"          MaxDHTime,",
				"          {Location Match or Not},",
				"          {Shift Id},",
				"          {Shift Date},",
				"          Week_of_Year,",
				"          {XPS_ECUser.name} = name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"derivedColumn5, XpsEcUser join({MH Put CHE Operator Id} == user_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"select4 select(mapColumn(",
				"          each(match(true()),",
				"               regexReplace($$,' ','_') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 alterRow(upsertIf(true())) ~> alterRow1",
				"select6 alterRow(upsertIf(true())) ~> AlterRow2",
				"select7 alterRow(upsertIf(true())) ~> alterRow3",
				"derivedColumn2 select(mapColumn(",
				"          each(match(true()),",
				"               regexReplace($$,' ','_') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"derivedColumn1 select(mapColumn(",
				"          each(match(true()),",
				"               regexReplace($$,' ','_') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"filter5 aggregate(groupBy(gkey),",
				"     each(match(name!='gkey'), $$ = first($$))) ~> aggregate2",
				"select1 filter(not(isNull(mve_gkey))) ~> filter4",
				"filter4 aggregate(groupBy(mve_gkey),",
				"     each(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate3",
				"select2 filter(not(isNull(gkey))) ~> filter5",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/violation',",
				"     mergeSchema: false,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['mve_gkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> violation",
				"AlterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/decking',",
				"     mergeSchema: false,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['gkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> decking",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'mnhpi',",
				"     folderPath: 'gold/move',",
				"     mergeSchema: false,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['mve_gkey'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> move"
			]
		}
	}
}