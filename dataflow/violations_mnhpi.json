{
	"name": "violations_mnhpi",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "MoveHistory"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "DeckingHistory"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "ShiftData"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "ShiftInfo"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "XpsEcUser"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Unit Nbr} as string,",
				"          {Facility Id} as string,",
				"          {Complex Id} as string,",
				"          {Yard Id} as string,",
				"          {Carrier Visit Key} as integer,",
				"          {Event Type Id} as string,",
				"          {Move Kind} as string,",
				"          {From Location} as string,",
				"          {To Location} as string,",
				"          {From Position Name} as string,",
				"          {To Position Name} as string,",
				"          {Carry CHE Operator Id} as string,",
				"          {Fetch CHE Operator Id} as string,",
				"          {Put CHE Operator Id} as string,",
				"          {Fetch CHE Id} as short,",
				"          {Fetch CHE Kind} as string,",
				"          {Carry CHE Id} as short,",
				"          {Carry CHE Kind} as string,",
				"          {Put CHE Id} as short,",
				"          {Put CHE Kind} as string,",
				"          {QC CHE Id} as short,",
				"          {QC CHE Kind} as string,",
				"          t_carry_complete as timestamp,",
				"          t_put as timestamp,",
				"          t_fetch as timestamp,",
				"          t_dispatch as timestamp,",
				"          t_discharge as timestamp,",
				"          t_carry_dispatch as timestamp,",
				"          t_carry_fetch_ready as timestamp,",
				"          t_carry_put_ready as timestamp,",
				"          dist_carry as short,",
				"          dist_start as short,",
				"          {Twin Fetch} as boolean,",
				"          {Twin Carry} as boolean,",
				"          {Twin Put} as boolean,",
				"          {Category Id} as string,",
				"          {Freight Kind Id} as string,",
				"          to_pos_gkey as integer,",
				"          fm_pos_gkey as integer,",
				"          {Restow Reason} as string,",
				"          {Container Line Id} as string,",
				"          {Container Line Role} as string,",
				"          pow as string,",
				"          mve_gkey as integer,",
				"          ufv_gkey as integer,",
				"          {Berth Id} as string,",
				"          {Goods And Ctr Wt Kg} as double,",
				"          active_ufv as integer,",
				"          {Requires Power Flag} as boolean,",
				"          {OOG Flag} as boolean,",
				"          {Shipper Id} as string,",
				"          {Consignee Id} as string,",
				"          {Commodity Id} as string,",
				"          ATA as timestamp,",
				"          ATD as timestamp,",
				"          Rehandles as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-movehistory',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> MoveHistory",
				"source(output(",
				"          gkey as integer,",
				"          uyv_gkey as integer,",
				"          unit_id as string,",
				"          time_stamp as timestamp,",
				"          decking_type as string,",
				"          node_id as string,",
				"          yard as boolean,",
				"          from_pos_loctype as string,",
				"          from_pos_locid as string,",
				"          from_pos_loc_gkey as integer,",
				"          from_pos_slot as string,",
				"          from_pos_name as string,",
				"          from_pos_bin as integer,",
				"          from_pos_tier as short,",
				"          to_pos_loctype as string,",
				"          to_pos_locid as string,",
				"          to_pos_loc_gkey as boolean,",
				"          to_pos_slot as string,",
				"          to_pos_name as string,",
				"          to_pos_bin as integer,",
				"          to_pos_tier as boolean,",
				"          total_score as integer,",
				"          execution_time as short,",
				"          details as string,",
				"          phase as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-deckinghistory',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> DeckingHistory",
				"source(output(",
				"          {Shift Id} as string,",
				"          Hour as integer,",
				"          Minute as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-shiftinfo',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> ShiftData",
				"source(output(",
				"          {Shift Name} as string,",
				"          {Shift Start Hour} as integer,",
				"          {Shift Start Minute} as integer,",
				"          {Shift Start} as string,",
				"          {Shift End Hour} as integer,",
				"          {Shift End Minute} as integer,",
				"          {Shift End} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-shiftdata',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> ShiftInfo",
				"source(output(",
				"          gkey as short,",
				"          user_id as string,",
				"          name as string,",
				"          yard as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'mnhpi-xpsuser',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> XpsEcUser",
				"MoveHistory select(mapColumn(",
				"          mve_gkey,",
				"          {Unit Nbr},",
				"          {Event Type Id},",
				"          {Move Kind},",
				"          {From Location},",
				"          {To Position Name},",
				"          {Put CHE Operator Id},",
				"          {Put CHE Id},",
				"          {MH T_Put DateTime} = t_put,",
				"          {Freight Kind Id},",
				"          {Category Id},",
				"          ufv_gkey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(Year_Month = (year({MH T_Put DateTime}) * 100) + month({MH T_Put DateTime}),",
				"          Year_Week = (year({MH T_Put DateTime}) * 100) + weekOfYear({MH T_Put DateTime})) ~> derivedColumn1",
				"DeckingHistory select(mapColumn(",
				"          gkey,",
				"          unit_id,",
				"          {DH TimeStamp} = time_stamp,",
				"          Decking_Type = decking_type,",
				"          to_pos_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 filter(Decking_Type == 'Bump Intruder' || Decking_Type == 'Vessel Discharge' || Decking_Type == 'Vessel Discharge - Twin' || Decking_Type == 'XD Drop if Floating Refine' || Decking_Type == 'XD Refine Request' || Decking_Type == 'XD Rehandle Request') ~> filter1",
				"filter1 derive(Year_Month = (year({DH TimeStamp}) * 100) + month({DH TimeStamp}),",
				"          Year_Week = (year({DH TimeStamp}) * 100) + weekOfYear({DH TimeStamp})) ~> derivedColumn2",
				"derivedColumn1, derivedColumn2 join({Unit Nbr} == unit_id",
				"     && derivedColumn1@Year_Month == derivedColumn2@Year_Month",
				"     && derivedColumn1@Year_Week == derivedColumn2@Year_Week,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 filter({From Location} != 'YARD' && unit_id != '' && !startsWith(split({To Position Name}, \"-\")[3], 'CR')) ~> filter2",
				"filter2 derive({MH TPut Less 4 hours} = add({MH T_Put DateTime} , -4*60*60*1000),",
				"          {DH TimeStamp Within 4 Hours} = iif(({DH TimeStamp} >= add({MH T_Put DateTime} , -4*60*60*1000)) && ({DH TimeStamp} <= {MH T_Put DateTime}), 1, 0),",
				"          {MH ToPosName Short} = split({To Position Name}, \"-\")[3],",
				"          {MH ToPosName Short 5Char} = iif(length(split({To Position Name}, \"-\")[3]) == 6, substring(split({To Position Name}, \"-\")[3], 0, 5), split({To Position Name}, \"-\")[3]),",
				"          {DH ToPosName Shorrt} = split(to_pos_name, \"-\")[3],",
				"          {DH ToPosName Short 5Char} = iif(length(split(to_pos_name, \"-\")[3]) == 6, substring(split(to_pos_name, \"-\")[3], 0, 5), split(to_pos_name, \"-\")[3])) ~> derivedColumn3",
				"derivedColumn3 filter({DH TimeStamp Within 4 Hours} == 1) ~> filter3"
			]
		}
	}
}