{
	"name": "sc_file correction",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pbixpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "3",
				"spark.autotune.trackingId": "f57753be-097a-4b92-a788-2fa5119d7a66"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/095c0f82-6a29-4db3-9f53-6808ff55fa13/resourceGroups/NavisBIAnalyticsPowerBiData2/providers/Microsoft.Synapse/workspaces/navispowerbidata2/bigDataPools/pbixpool",
				"name": "pbixpool",
				"type": "Spark",
				"endpoint": "https://navispowerbidata2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pbixpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql import functions as F\n",
					"\n",
					"# Spark session\n",
					"spark = SparkSession.builder.getOrCreate()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Input (raw) and Output (cleaned) folders\n",
					"input_path = \"abfss://cgsa@navispowerbidatastorage2.dfs.core.windows.net/bronze/stackconformity/archive/\"\n",
					"output_path = \"abfss://cgsa@navispowerbidatastorage2.dfs.core.windows.net/bronze/stackconformity/load/\"\n",
					"\n",
					"# Read all TXT files (tab-delimited)\n",
					"df = spark.read.option(\"header\", True).option(\"delimiter\", \"\\t\").csv(input_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Rename Assigned CHE -> CHE if it exists\n",
					"if \"Assigned CHE\" in df.columns:\n",
					"    df = df.withColumnRenamed(\"Assigned CHE\", \"CHE\")\n",
					"\n",
					"# Final schema definition\n",
					"expected_columns = [\n",
					"    \"Equipment ID\", \"Stacking Factor\", \"CHE\", \"Blk Typ\", \"Type\",\n",
					"    \"Current Position\", \"Yard Row\", \"Cat\", \"Sts\", \"Section Factor\"\n",
					"]\n",
					"\n",
					"# Add missing columns if not present\n",
					"for col_name in expected_columns:\n",
					"    if col_name not in df.columns:\n",
					"        df = df.withColumn(col_name, F.lit(None))\n",
					"\n",
					"# Reorder columns\n",
					"df = df.select(expected_columns)\n",
					"\n",
					"# Write back to cleaned folder (tab-delimited with header)\n",
					"df.write.mode(\"overwrite\").option(\"header\", True).option(\"delimiter\", \"\\t\").csv(output_path)\n",
					"\n",
					"print(\"âœ… All files cleaned and standardized to new folder:\", output_path)\n",
					""
				],
				"execution_count": null
			}
		]
	}
}