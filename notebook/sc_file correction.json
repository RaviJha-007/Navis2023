{
	"name": "sc_file correction",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pbixpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "3",
				"spark.autotune.trackingId": "ab224b99-38c2-4092-abe4-fc445a389fc2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/095c0f82-6a29-4db3-9f53-6808ff55fa13/resourceGroups/NavisBIAnalyticsPowerBiData2/providers/Microsoft.Synapse/workspaces/navispowerbidata2/bigDataPools/pbixpool",
				"name": "pbixpool",
				"type": "Spark",
				"endpoint": "https://navispowerbidata2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pbixpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.types import StructType, StructField, StringType"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# Spark session\n",
					"spark = SparkSession.builder.getOrCreate()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Input (raw) and Output (cleaned) folders\n",
					"input_path = \"abfss://cgsa@navispowerbidatastorage2.dfs.core.windows.net/bronze/stackconformity/archive/\"\n",
					"output_path = \"abfss://cgsa@navispowerbidatastorage2.dfs.core.windows.net/bronze/stackconformity/load/\"\n",
					"\n",
					"# # Define the schema explicitly\n",
					"# schema = StructType([\n",
					"#     StructField(\"Equipment ID\", StringType(), True),\n",
					"#     StructField(\"Stacking Factor\", StringType(), True),\n",
					"#     StructField(\"CHE\", StringType(), True),            # renamed from Assigned CHE\n",
					"#     StructField(\"Blk Typ\", StringType(), True),\n",
					"#     StructField(\"Type\", StringType(), True),\n",
					"#     StructField(\"Current Position\", StringType(), True),\n",
					"#     StructField(\"Yard Row\", StringType(), True),\n",
					"#     StructField(\"Cat\", StringType(), True),\n",
					"#     StructField(\"Sts\", StringType(), True),\n",
					"#     StructField(\"Section Factor\", StringType(), True)\n",
					"# ])\n",
					"\n",
					"# # Read with enforced schema (tab delimited)\n",
					"# df = spark.read.option(\"header\", True) \\\n",
					"#     .option(\"delimiter\", \"\\t\") \\\n",
					"#     .schema(schema) \\\n",
					"#     .csv(input_path)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"# Read all txt files as plain text\n",
					"df = spark.read.text(input_path)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"# Replace only in the first line of each file\n",
					"# We'll tag lines with an index to identify headers\n",
					"from pyspark.sql.functions import regexp_replace, row_number, input_file_name\n",
					"from pyspark.sql.window import Window\n",
					"\n",
					"\n",
					"# Read all txt files as plain text\n",
					"df = spark.read.text(input_path).withColumn(\"file\", input_file_name())\n",
					"\n",
					"# Window to identify first row (header) per file\n",
					"w = Window.partitionBy(\"file\").orderBy(\"value\")\n",
					"\n",
					"df = df.withColumn(\"row_num\", row_number().over(w))\n",
					"\n",
					"# Replace header \"Assigned CHE\" -> \"CHE\" only for first line of each file\n",
					"df = df.withColumn(\n",
					"    \"value\",\n",
					"    regexp_replace(\"value\", \"Assigned CHE\", \"CHE\")\n",
					")\n",
					"\n",
					"# Keep only the single \"value\" column so text() works\n",
					"df_out = df.select(\"value\")\n",
					"\n",
					"# Write back to cleaned folder\n",
					"df_out.write.mode(\"overwrite\").text(output_path)\n",
					"\n",
					"print(\"✅ Cleaned files written to:\", output_path)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(df)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Rename Assigned CHE -> CHE if it exists\n",
					"if \"Assigned CHE\" in df.columns:\n",
					"    df = df.withColumnRenamed(\"Assigned CHE\", \"CHE\")\n",
					"\n",
					"# Final schema definition\n",
					"expected_columns = [\n",
					"    \"Equipment ID\", \"Stacking Factor\", \"CHE\", \"Blk Typ\", \"Type\",\n",
					"    \"Current Position\", \"Yard Row\", \"Cat\", \"Sts\", \"Section Factor\"\n",
					"]\n",
					"\n",
					"# Add missing columns if not present\n",
					"for col_name in expected_columns:\n",
					"    if col_name not in df.columns:\n",
					"        df = df.withColumn(col_name, F.lit(None))\n",
					"\n",
					"# Reorder columns\n",
					"df = df.select(expected_columns)\n",
					"\n",
					"# Write back as tab-delimited with header\n",
					"df.write.mode(\"overwrite\") \\\n",
					"    .option(\"header\", True) \\\n",
					"    .option(\"delimiter\", \"\\t\") \\\n",
					"    .csv(output_path)\n",
					"\n",
					"\n",
					"\n",
					"# Write back to cleaned folder (tab-delimited with header)\n",
					"df.write.mode(\"overwrite\").option(\"header\", True).option(\"delimiter\", \"\\t\").csv(output_path)\n",
					"\n",
					"print(\"✅ All files cleaned and standardized to new folder:\", output_path)\n",
					""
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}